
test_sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d18  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004ea4  08004ea4  00014ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fa4  08004fa4  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08004fa4  08004fa4  00014fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fac  08004fac  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fac  08004fac  00014fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fb0  08004fb0  00014fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001388  20000024  08004fd8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013ac  08004fd8  000213ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010aa0  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027a6  00000000  00000000  00030b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  000332e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6a  00000000  00000000  000341b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021861  00000000  00000000  00034d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001345a  00000000  00000000  00056583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2a8d  00000000  00000000  000699dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c5c  00000000  00000000  0012c46c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  001300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000024 	.word	0x20000024
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004e8c 	.word	0x08004e8c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000028 	.word	0x20000028
 80001c8:	08004e8c 	.word	0x08004e8c

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f0:	f000 b970 	b.w	80004d4 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	460d      	mov	r5, r1
 8000214:	4604      	mov	r4, r0
 8000216:	460f      	mov	r7, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14a      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021c:	428a      	cmp	r2, r1
 800021e:	4694      	mov	ip, r2
 8000220:	d965      	bls.n	80002ee <__udivmoddi4+0xe2>
 8000222:	fab2 f382 	clz	r3, r2
 8000226:	b143      	cbz	r3, 800023a <__udivmoddi4+0x2e>
 8000228:	fa02 fc03 	lsl.w	ip, r2, r3
 800022c:	f1c3 0220 	rsb	r2, r3, #32
 8000230:	409f      	lsls	r7, r3
 8000232:	fa20 f202 	lsr.w	r2, r0, r2
 8000236:	4317      	orrs	r7, r2
 8000238:	409c      	lsls	r4, r3
 800023a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fbb7 f1fe 	udiv	r1, r7, lr
 8000246:	0c22      	lsrs	r2, r4, #16
 8000248:	fb0e 7711 	mls	r7, lr, r1, r7
 800024c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000250:	fb01 f005 	mul.w	r0, r1, r5
 8000254:	4290      	cmp	r0, r2
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x62>
 8000258:	eb1c 0202 	adds.w	r2, ip, r2
 800025c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000260:	f080 811c 	bcs.w	800049c <__udivmoddi4+0x290>
 8000264:	4290      	cmp	r0, r2
 8000266:	f240 8119 	bls.w	800049c <__udivmoddi4+0x290>
 800026a:	3902      	subs	r1, #2
 800026c:	4462      	add	r2, ip
 800026e:	1a12      	subs	r2, r2, r0
 8000270:	b2a4      	uxth	r4, r4
 8000272:	fbb2 f0fe 	udiv	r0, r2, lr
 8000276:	fb0e 2210 	mls	r2, lr, r0, r2
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	fb00 f505 	mul.w	r5, r0, r5
 8000282:	42a5      	cmp	r5, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x90>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x294>
 8000292:	42a5      	cmp	r5, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x294>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11e      	cbz	r6, 80002ae <__udivmoddi4+0xa2>
 80002a6:	40dc      	lsrs	r4, r3
 80002a8:	2300      	movs	r3, #0
 80002aa:	e9c6 4300 	strd	r4, r3, [r6]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0xbc>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80ed 	beq.w	8000496 <__udivmoddi4+0x28a>
 80002bc:	2100      	movs	r1, #0
 80002be:	e9c6 0500 	strd	r0, r5, [r6]
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	d149      	bne.n	8000364 <__udivmoddi4+0x158>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xce>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2be>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb65 0203 	sbc.w	r2, r5, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	4617      	mov	r7, r2
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d0e2      	beq.n	80002ae <__udivmoddi4+0xa2>
 80002e8:	e9c6 4700 	strd	r4, r7, [r6]
 80002ec:	e7df      	b.n	80002ae <__udivmoddi4+0xa2>
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xe6>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x210>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2101      	movs	r1, #1
 8000308:	fbb2 f5f7 	udiv	r5, r2, r7
 800030c:	fb07 2015 	mls	r0, r7, r5, r2
 8000310:	0c22      	lsrs	r2, r4, #16
 8000312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000316:	fb0e f005 	mul.w	r0, lr, r5
 800031a:	4290      	cmp	r0, r2
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x124>
 800031e:	eb1c 0202 	adds.w	r2, ip, r2
 8000322:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4290      	cmp	r0, r2
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2b8>
 800032e:	4645      	mov	r5, r8
 8000330:	1a12      	subs	r2, r2, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb2 f0f7 	udiv	r0, r2, r7
 8000338:	fb07 2210 	mls	r2, r7, r0, r2
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x14e>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x14c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2c2>
 8000358:	4610      	mov	r0, r2
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000362:	e79f      	b.n	80002a4 <__udivmoddi4+0x98>
 8000364:	f1c1 0720 	rsb	r7, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa05 f401 	lsl.w	r4, r5, r1
 8000376:	fa20 f307 	lsr.w	r3, r0, r7
 800037a:	40fd      	lsrs	r5, r7
 800037c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fbb5 f8f9 	udiv	r8, r5, r9
 8000386:	fa1f fe8c 	uxth.w	lr, ip
 800038a:	fb09 5518 	mls	r5, r9, r8, r5
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	fb08 f50e 	mul.w	r5, r8, lr
 8000398:	42a5      	cmp	r5, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	fa00 f001 	lsl.w	r0, r0, r1
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2b4>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2b4>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	b29d      	uxth	r5, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2ac>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2ac>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	4464      	add	r4, ip
 80003e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ea:	fba3 9502 	umull	r9, r5, r3, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46ae      	mov	lr, r5
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x29c>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x298>
 80003fc:	b156      	cbz	r6, 8000414 <__udivmoddi4+0x208>
 80003fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000402:	eb64 040e 	sbc.w	r4, r4, lr
 8000406:	fa04 f707 	lsl.w	r7, r4, r7
 800040a:	40ca      	lsrs	r2, r1
 800040c:	40cc      	lsrs	r4, r1
 800040e:	4317      	orrs	r7, r2
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	4618      	mov	r0, r3
 8000416:	2100      	movs	r1, #0
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	f1c3 0120 	rsb	r1, r3, #32
 8000420:	fa02 fc03 	lsl.w	ip, r2, r3
 8000424:	fa20 f201 	lsr.w	r2, r0, r1
 8000428:	fa25 f101 	lsr.w	r1, r5, r1
 800042c:	409d      	lsls	r5, r3
 800042e:	432a      	orrs	r2, r5
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1510 	mls	r5, r7, r0, r1
 8000440:	0c11      	lsrs	r1, r2, #16
 8000442:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000446:	fb00 f50e 	mul.w	r5, r0, lr
 800044a:	428d      	cmp	r5, r1
 800044c:	fa04 f403 	lsl.w	r4, r4, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x258>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800045c:	428d      	cmp	r5, r1
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000460:	3802      	subs	r0, #2
 8000462:	4461      	add	r1, ip
 8000464:	1b49      	subs	r1, r1, r5
 8000466:	b292      	uxth	r2, r2
 8000468:	fbb1 f5f7 	udiv	r5, r1, r7
 800046c:	fb07 1115 	mls	r1, r7, r5, r1
 8000470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000474:	fb05 f10e 	mul.w	r1, r5, lr
 8000478:	4291      	cmp	r1, r2
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x282>
 800047c:	eb1c 0202 	adds.w	r2, ip, r2
 8000480:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000486:	4291      	cmp	r1, r2
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 800048a:	3d02      	subs	r5, #2
 800048c:	4462      	add	r2, ip
 800048e:	1a52      	subs	r2, r2, r1
 8000490:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0xfc>
 8000496:	4631      	mov	r1, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e708      	b.n	80002ae <__udivmoddi4+0xa2>
 800049c:	4639      	mov	r1, r7
 800049e:	e6e6      	b.n	800026e <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x90>
 80004a4:	4548      	cmp	r0, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b0:	3b01      	subs	r3, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b4:	4645      	mov	r5, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x282>
 80004b8:	462b      	mov	r3, r5
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x258>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c4:	3d02      	subs	r5, #2
 80004c6:	4462      	add	r2, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x124>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xd8>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x14e>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2110      	movs	r1, #16
 80004e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e4:	f001 fa94 	bl	8001a10 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004e8:	2001      	movs	r0, #1
 80004ea:	f001 f81d 	bl	8001528 <HAL_Delay>
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80004f6:	2201      	movs	r2, #1
 80004f8:	2110      	movs	r1, #16
 80004fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fe:	f001 fa87 	bl	8001a10 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000502:	2001      	movs	r0, #1
 8000504:	f001 f810 	bl	8001528 <HAL_Delay>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}

0800050c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000516:	bf00      	nop
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <SPI_TxByte+0x30>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	f003 0302 	and.w	r3, r3, #2
 8000522:	2b02      	cmp	r3, #2
 8000524:	d1f8      	bne.n	8000518 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000526:	1df9      	adds	r1, r7, #7
 8000528:	2364      	movs	r3, #100	; 0x64
 800052a:	2201      	movs	r2, #1
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <SPI_TxByte+0x30>)
 800052e:	f002 fcce 	bl	8002ece <HAL_SPI_Transmit>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000044 	.word	0x20000044

08000540 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	460b      	mov	r3, r1
 800054a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800054c:	bf00      	nop
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <SPI_TxBuffer+0x30>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	f003 0302 	and.w	r3, r3, #2
 8000558:	2b02      	cmp	r3, #2
 800055a:	d1f8      	bne.n	800054e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800055c:	887a      	ldrh	r2, [r7, #2]
 800055e:	2364      	movs	r3, #100	; 0x64
 8000560:	6879      	ldr	r1, [r7, #4]
 8000562:	4803      	ldr	r0, [pc, #12]	; (8000570 <SPI_TxBuffer+0x30>)
 8000564:	f002 fcb3 	bl	8002ece <HAL_SPI_Transmit>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000044 	.word	0x20000044

08000574 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800057a:	23ff      	movs	r3, #255	; 0xff
 800057c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800057e:	bf00      	nop
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <SPI_RxByte+0x34>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	2b02      	cmp	r3, #2
 800058c:	d1f8      	bne.n	8000580 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800058e:	1dba      	adds	r2, r7, #6
 8000590:	1df9      	adds	r1, r7, #7
 8000592:	2364      	movs	r3, #100	; 0x64
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2301      	movs	r3, #1
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <SPI_RxByte+0x34>)
 800059a:	f002 fe0d 	bl	80031b8 <HAL_SPI_TransmitReceive>

	return data;
 800059e:	79bb      	ldrb	r3, [r7, #6]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000044 	.word	0x20000044

080005ac <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005b4:	f7ff ffde 	bl	8000574 <SPI_RxByte>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	701a      	strb	r2, [r3, #0]
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <SD_ReadyWait+0x30>)
 80005d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005d4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80005d6:	f7ff ffcd 	bl	8000574 <SPI_RxByte>
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2bff      	cmp	r3, #255	; 0xff
 80005e2:	d004      	beq.n	80005ee <SD_ReadyWait+0x26>
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <SD_ReadyWait+0x30>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1f3      	bne.n	80005d6 <SD_ReadyWait+0xe>

	return res;
 80005ee:	79fb      	ldrb	r3, [r7, #7]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	2000116b 	.word	0x2000116b

080005fc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000602:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000606:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000608:	f7ff ff73 	bl	80004f2 <DESELECT>
	for(int i = 0; i < 10; i++)
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	e005      	b.n	800061e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000612:	20ff      	movs	r0, #255	; 0xff
 8000614:	f7ff ff7a 	bl	800050c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	3301      	adds	r3, #1
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	2b09      	cmp	r3, #9
 8000622:	ddf6      	ble.n	8000612 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000624:	f7ff ff58 	bl	80004d8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000628:	2340      	movs	r3, #64	; 0x40
 800062a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800063c:	2395      	movs	r3, #149	; 0x95
 800063e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000640:	463b      	mov	r3, r7
 8000642:	2106      	movs	r1, #6
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ff7b 	bl	8000540 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800064a:	e002      	b.n	8000652 <SD_PowerOn+0x56>
	{
		cnt--;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3b01      	subs	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000652:	f7ff ff8f 	bl	8000574 <SPI_RxByte>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d002      	beq.n	8000662 <SD_PowerOn+0x66>
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d1f4      	bne.n	800064c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000662:	f7ff ff46 	bl	80004f2 <DESELECT>
	SPI_TxByte(0XFF);
 8000666:	20ff      	movs	r0, #255	; 0xff
 8000668:	f7ff ff50 	bl	800050c <SPI_TxByte>

	PowerFlag = 1;
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <SD_PowerOn+0x80>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000041 	.word	0x20000041

08000680 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <SD_PowerOff+0x14>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	20000041 	.word	0x20000041

08000698 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <SD_CheckPower+0x14>)
 800069e:	781b      	ldrb	r3, [r3, #0]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000041 	.word	0x20000041

080006b0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <SD_RxDataBlock+0x5c>)
 80006bc:	22c8      	movs	r2, #200	; 0xc8
 80006be:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006c0:	f7ff ff58 	bl	8000574 <SPI_RxByte>
 80006c4:	4603      	mov	r3, r0
 80006c6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	2bff      	cmp	r3, #255	; 0xff
 80006cc:	d104      	bne.n	80006d8 <SD_RxDataBlock+0x28>
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <SD_RxDataBlock+0x5c>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1f3      	bne.n	80006c0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	2bfe      	cmp	r3, #254	; 0xfe
 80006dc:	d001      	beq.n	80006e2 <SD_RxDataBlock+0x32>
 80006de:	2300      	movs	r3, #0
 80006e0:	e00f      	b.n	8000702 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	1c5a      	adds	r2, r3, #1
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff5f 	bl	80005ac <SPI_RxBytePtr>
	} while(len--);
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	1e5a      	subs	r2, r3, #1
 80006f2:	603a      	str	r2, [r7, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d1f4      	bne.n	80006e2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80006f8:	f7ff ff3c 	bl	8000574 <SPI_RxByte>
	SPI_RxByte();
 80006fc:	f7ff ff3a 	bl	8000574 <SPI_RxByte>

	return TRUE;
 8000700:	2301      	movs	r3, #1
}
 8000702:	4618      	mov	r0, r3
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000116a 	.word	0x2000116a

08000710 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000720:	f7ff ff52 	bl	80005c8 <SD_ReadyWait>
 8000724:	4603      	mov	r3, r0
 8000726:	2bff      	cmp	r3, #255	; 0xff
 8000728:	d001      	beq.n	800072e <SD_TxDataBlock+0x1e>
 800072a:	2300      	movs	r3, #0
 800072c:	e02f      	b.n	800078e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff feeb 	bl	800050c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	2bfd      	cmp	r3, #253	; 0xfd
 800073a:	d020      	beq.n	800077e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800073c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff fefd 	bl	8000540 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000746:	f7ff ff15 	bl	8000574 <SPI_RxByte>
		SPI_RxByte();
 800074a:	f7ff ff13 	bl	8000574 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800074e:	e00b      	b.n	8000768 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000750:	f7ff ff10 	bl	8000574 <SPI_RxByte>
 8000754:	4603      	mov	r3, r0
 8000756:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	f003 031f 	and.w	r3, r3, #31
 800075e:	2b05      	cmp	r3, #5
 8000760:	d006      	beq.n	8000770 <SD_TxDataBlock+0x60>
			i++;
 8000762:	7bbb      	ldrb	r3, [r7, #14]
 8000764:	3301      	adds	r3, #1
 8000766:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000768:	7bbb      	ldrb	r3, [r7, #14]
 800076a:	2b40      	cmp	r3, #64	; 0x40
 800076c:	d9f0      	bls.n	8000750 <SD_TxDataBlock+0x40>
 800076e:	e000      	b.n	8000772 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000770:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000772:	bf00      	nop
 8000774:	f7ff fefe 	bl	8000574 <SPI_RxByte>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0fa      	beq.n	8000774 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	f003 031f 	and.w	r3, r3, #31
 8000784:	2b05      	cmp	r3, #5
 8000786:	d101      	bne.n	800078c <SD_TxDataBlock+0x7c>
 8000788:	2301      	movs	r3, #1
 800078a:	e000      	b.n	800078e <SD_TxDataBlock+0x7e>

	return FALSE;
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b084      	sub	sp, #16
 800079a:	af00      	add	r7, sp, #0
 800079c:	4603      	mov	r3, r0
 800079e:	6039      	str	r1, [r7, #0]
 80007a0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80007a2:	f7ff ff11 	bl	80005c8 <SD_ReadyWait>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2bff      	cmp	r3, #255	; 0xff
 80007aa:	d001      	beq.n	80007b0 <SD_SendCmd+0x1a>
 80007ac:	23ff      	movs	r3, #255	; 0xff
 80007ae:	e042      	b.n	8000836 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff feaa 	bl	800050c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	0e1b      	lsrs	r3, r3, #24
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fea4 	bl	800050c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	0c1b      	lsrs	r3, r3, #16
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fe9e 	bl	800050c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	0a1b      	lsrs	r3, r3, #8
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fe98 	bl	800050c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fe93 	bl	800050c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b40      	cmp	r3, #64	; 0x40
 80007ea:	d102      	bne.n	80007f2 <SD_SendCmd+0x5c>
 80007ec:	2395      	movs	r3, #149	; 0x95
 80007ee:	73fb      	strb	r3, [r7, #15]
 80007f0:	e007      	b.n	8000802 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b48      	cmp	r3, #72	; 0x48
 80007f6:	d102      	bne.n	80007fe <SD_SendCmd+0x68>
 80007f8:	2387      	movs	r3, #135	; 0x87
 80007fa:	73fb      	strb	r3, [r7, #15]
 80007fc:	e001      	b.n	8000802 <SD_SendCmd+0x6c>
	else crc = 1;
 80007fe:	2301      	movs	r3, #1
 8000800:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fe81 	bl	800050c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b4c      	cmp	r3, #76	; 0x4c
 800080e:	d101      	bne.n	8000814 <SD_SendCmd+0x7e>
 8000810:	f7ff feb0 	bl	8000574 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000814:	230a      	movs	r3, #10
 8000816:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000818:	f7ff feac 	bl	8000574 <SPI_RxByte>
 800081c:	4603      	mov	r3, r0
 800081e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000820:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000824:	2b00      	cmp	r3, #0
 8000826:	da05      	bge.n	8000834 <SD_SendCmd+0x9e>
 8000828:	7bbb      	ldrb	r3, [r7, #14]
 800082a:	3b01      	subs	r3, #1
 800082c:	73bb      	strb	r3, [r7, #14]
 800082e:	7bbb      	ldrb	r3, [r7, #14]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d1f1      	bne.n	8000818 <SD_SendCmd+0x82>

	return res;
 8000834:	7b7b      	ldrb	r3, [r7, #13]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SD_disk_initialize+0x14>
 8000850:	2301      	movs	r3, #1
 8000852:	e0d6      	b.n	8000a02 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000854:	4b6d      	ldr	r3, [pc, #436]	; (8000a0c <SD_disk_initialize+0x1cc>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	2b00      	cmp	r3, #0
 8000860:	d003      	beq.n	800086a <SD_disk_initialize+0x2a>
 8000862:	4b6a      	ldr	r3, [pc, #424]	; (8000a0c <SD_disk_initialize+0x1cc>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	e0cb      	b.n	8000a02 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800086a:	f7ff fec7 	bl	80005fc <SD_PowerOn>

	/* slave select */
	SELECT();
 800086e:	f7ff fe33 	bl	80004d8 <SELECT>

	/* check disk type */
	type = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000876:	2100      	movs	r1, #0
 8000878:	2040      	movs	r0, #64	; 0x40
 800087a:	f7ff ff8c 	bl	8000796 <SD_SendCmd>
 800087e:	4603      	mov	r3, r0
 8000880:	2b01      	cmp	r3, #1
 8000882:	f040 80a6 	bne.w	80009d2 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000886:	4b62      	ldr	r3, [pc, #392]	; (8000a10 <SD_disk_initialize+0x1d0>)
 8000888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800088c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800088e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000892:	2048      	movs	r0, #72	; 0x48
 8000894:	f7ff ff7f 	bl	8000796 <SD_SendCmd>
 8000898:	4603      	mov	r3, r0
 800089a:	2b01      	cmp	r3, #1
 800089c:	d158      	bne.n	8000950 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
 80008a2:	e00c      	b.n	80008be <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80008a4:	7bfc      	ldrb	r4, [r7, #15]
 80008a6:	f7ff fe65 	bl	8000574 <SPI_RxByte>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	f104 0310 	add.w	r3, r4, #16
 80008b2:	443b      	add	r3, r7
 80008b4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	3301      	adds	r3, #1
 80008bc:	73fb      	strb	r3, [r7, #15]
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	d9ef      	bls.n	80008a4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008c4:	7abb      	ldrb	r3, [r7, #10]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	f040 8083 	bne.w	80009d2 <SD_disk_initialize+0x192>
 80008cc:	7afb      	ldrb	r3, [r7, #11]
 80008ce:	2baa      	cmp	r3, #170	; 0xaa
 80008d0:	d17f      	bne.n	80009d2 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008d2:	2100      	movs	r1, #0
 80008d4:	2077      	movs	r0, #119	; 0x77
 80008d6:	f7ff ff5e 	bl	8000796 <SD_SendCmd>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d807      	bhi.n	80008f0 <SD_disk_initialize+0xb0>
 80008e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008e4:	2069      	movs	r0, #105	; 0x69
 80008e6:	f7ff ff56 	bl	8000796 <SD_SendCmd>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d005      	beq.n	80008fc <SD_disk_initialize+0xbc>
				} while (Timer1);
 80008f0:	4b47      	ldr	r3, [pc, #284]	; (8000a10 <SD_disk_initialize+0x1d0>)
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1eb      	bne.n	80008d2 <SD_disk_initialize+0x92>
 80008fa:	e000      	b.n	80008fe <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008fc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80008fe:	4b44      	ldr	r3, [pc, #272]	; (8000a10 <SD_disk_initialize+0x1d0>)
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	b29b      	uxth	r3, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	d064      	beq.n	80009d2 <SD_disk_initialize+0x192>
 8000908:	2100      	movs	r1, #0
 800090a:	207a      	movs	r0, #122	; 0x7a
 800090c:	f7ff ff43 	bl	8000796 <SD_SendCmd>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d15d      	bne.n	80009d2 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000916:	2300      	movs	r3, #0
 8000918:	73fb      	strb	r3, [r7, #15]
 800091a:	e00c      	b.n	8000936 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 800091c:	7bfc      	ldrb	r4, [r7, #15]
 800091e:	f7ff fe29 	bl	8000574 <SPI_RxByte>
 8000922:	4603      	mov	r3, r0
 8000924:	461a      	mov	r2, r3
 8000926:	f104 0310 	add.w	r3, r4, #16
 800092a:	443b      	add	r3, r7
 800092c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	3301      	adds	r3, #1
 8000934:	73fb      	strb	r3, [r7, #15]
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	2b03      	cmp	r3, #3
 800093a:	d9ef      	bls.n	800091c <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800093c:	7a3b      	ldrb	r3, [r7, #8]
 800093e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SD_disk_initialize+0x10a>
 8000946:	230c      	movs	r3, #12
 8000948:	e000      	b.n	800094c <SD_disk_initialize+0x10c>
 800094a:	2304      	movs	r3, #4
 800094c:	73bb      	strb	r3, [r7, #14]
 800094e:	e040      	b.n	80009d2 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000950:	2100      	movs	r1, #0
 8000952:	2077      	movs	r0, #119	; 0x77
 8000954:	f7ff ff1f 	bl	8000796 <SD_SendCmd>
 8000958:	4603      	mov	r3, r0
 800095a:	2b01      	cmp	r3, #1
 800095c:	d808      	bhi.n	8000970 <SD_disk_initialize+0x130>
 800095e:	2100      	movs	r1, #0
 8000960:	2069      	movs	r0, #105	; 0x69
 8000962:	f7ff ff18 	bl	8000796 <SD_SendCmd>
 8000966:	4603      	mov	r3, r0
 8000968:	2b01      	cmp	r3, #1
 800096a:	d801      	bhi.n	8000970 <SD_disk_initialize+0x130>
 800096c:	2302      	movs	r3, #2
 800096e:	e000      	b.n	8000972 <SD_disk_initialize+0x132>
 8000970:	2301      	movs	r3, #1
 8000972:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000974:	7bbb      	ldrb	r3, [r7, #14]
 8000976:	2b02      	cmp	r3, #2
 8000978:	d10e      	bne.n	8000998 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800097a:	2100      	movs	r1, #0
 800097c:	2077      	movs	r0, #119	; 0x77
 800097e:	f7ff ff0a 	bl	8000796 <SD_SendCmd>
 8000982:	4603      	mov	r3, r0
 8000984:	2b01      	cmp	r3, #1
 8000986:	d80e      	bhi.n	80009a6 <SD_disk_initialize+0x166>
 8000988:	2100      	movs	r1, #0
 800098a:	2069      	movs	r0, #105	; 0x69
 800098c:	f7ff ff03 	bl	8000796 <SD_SendCmd>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d107      	bne.n	80009a6 <SD_disk_initialize+0x166>
 8000996:	e00d      	b.n	80009b4 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000998:	2100      	movs	r1, #0
 800099a:	2041      	movs	r0, #65	; 0x41
 800099c:	f7ff fefb 	bl	8000796 <SD_SendCmd>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d005      	beq.n	80009b2 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <SD_disk_initialize+0x1d0>)
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1e1      	bne.n	8000974 <SD_disk_initialize+0x134>
 80009b0:	e000      	b.n	80009b4 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009b2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <SD_disk_initialize+0x1d0>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d007      	beq.n	80009ce <SD_disk_initialize+0x18e>
 80009be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c2:	2050      	movs	r0, #80	; 0x50
 80009c4:	f7ff fee7 	bl	8000796 <SD_SendCmd>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <SD_disk_initialize+0x192>
 80009ce:	2300      	movs	r3, #0
 80009d0:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009d2:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <SD_disk_initialize+0x1d4>)
 80009d4:	7bbb      	ldrb	r3, [r7, #14]
 80009d6:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009d8:	f7ff fd8b 	bl	80004f2 <DESELECT>
	SPI_RxByte();
 80009dc:	f7ff fdca 	bl	8000574 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80009e0:	7bbb      	ldrb	r3, [r7, #14]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d008      	beq.n	80009f8 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <SD_disk_initialize+0x1cc>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	f023 0301 	bic.w	r3, r3, #1
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <SD_disk_initialize+0x1cc>)
 80009f4:	701a      	strb	r2, [r3, #0]
 80009f6:	e001      	b.n	80009fc <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80009f8:	f7ff fe42 	bl	8000680 <SD_PowerOff>
	}

	return Stat;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <SD_disk_initialize+0x1cc>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b2db      	uxtb	r3, r3
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	2000116a 	.word	0x2000116a
 8000a14:	20000040 	.word	0x20000040

08000a18 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SD_disk_status+0x14>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e002      	b.n	8000a32 <SD_disk_status+0x1a>
	return Stat;
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <SD_disk_status+0x28>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b2db      	uxtb	r3, r3
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000000 	.word	0x20000000

08000a44 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	4603      	mov	r3, r0
 8000a52:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d102      	bne.n	8000a60 <SD_disk_read+0x1c>
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d101      	bne.n	8000a64 <SD_disk_read+0x20>
 8000a60:	2304      	movs	r3, #4
 8000a62:	e051      	b.n	8000b08 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a64:	4b2a      	ldr	r3, [pc, #168]	; (8000b10 <SD_disk_read+0xcc>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SD_disk_read+0x32>
 8000a72:	2303      	movs	r3, #3
 8000a74:	e048      	b.n	8000b08 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a76:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <SD_disk_read+0xd0>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d102      	bne.n	8000a88 <SD_disk_read+0x44>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	025b      	lsls	r3, r3, #9
 8000a86:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a88:	f7ff fd26 	bl	80004d8 <SELECT>

	if (count == 1)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d111      	bne.n	8000ab6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	2051      	movs	r0, #81	; 0x51
 8000a96:	f7ff fe7e 	bl	8000796 <SD_SendCmd>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d129      	bne.n	8000af4 <SD_disk_read+0xb0>
 8000aa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa4:	68b8      	ldr	r0, [r7, #8]
 8000aa6:	f7ff fe03 	bl	80006b0 <SD_RxDataBlock>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d021      	beq.n	8000af4 <SD_disk_read+0xb0>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	e01e      	b.n	8000af4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	2052      	movs	r0, #82	; 0x52
 8000aba:	f7ff fe6c 	bl	8000796 <SD_SendCmd>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d117      	bne.n	8000af4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac8:	68b8      	ldr	r0, [r7, #8]
 8000aca:	f7ff fdf1 	bl	80006b0 <SD_RxDataBlock>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d00a      	beq.n	8000aea <SD_disk_read+0xa6>
				buff += 512;
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ada:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1ed      	bne.n	8000ac4 <SD_disk_read+0x80>
 8000ae8:	e000      	b.n	8000aec <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000aea:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000aec:	2100      	movs	r1, #0
 8000aee:	204c      	movs	r0, #76	; 0x4c
 8000af0:	f7ff fe51 	bl	8000796 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000af4:	f7ff fcfd 	bl	80004f2 <DESELECT>
	SPI_RxByte();
 8000af8:	f7ff fd3c 	bl	8000574 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	bf14      	ite	ne
 8000b02:	2301      	movne	r3, #1
 8000b04:	2300      	moveq	r3, #0
 8000b06:	b2db      	uxtb	r3, r3
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000040 	.word	0x20000040

08000b18 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	4603      	mov	r3, r0
 8000b26:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d102      	bne.n	8000b34 <SD_disk_write+0x1c>
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <SD_disk_write+0x20>
 8000b34:	2304      	movs	r3, #4
 8000b36:	e06b      	b.n	8000c10 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b38:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <SD_disk_write+0x100>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SD_disk_write+0x32>
 8000b46:	2303      	movs	r3, #3
 8000b48:	e062      	b.n	8000c10 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b4a:	4b33      	ldr	r3, [pc, #204]	; (8000c18 <SD_disk_write+0x100>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SD_disk_write+0x44>
 8000b58:	2302      	movs	r3, #2
 8000b5a:	e059      	b.n	8000c10 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b5c:	4b2f      	ldr	r3, [pc, #188]	; (8000c1c <SD_disk_write+0x104>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <SD_disk_write+0x56>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	025b      	lsls	r3, r3, #9
 8000b6c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b6e:	f7ff fcb3 	bl	80004d8 <SELECT>

	if (count == 1)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d110      	bne.n	8000b9a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b78:	6879      	ldr	r1, [r7, #4]
 8000b7a:	2058      	movs	r0, #88	; 0x58
 8000b7c:	f7ff fe0b 	bl	8000796 <SD_SendCmd>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d13a      	bne.n	8000bfc <SD_disk_write+0xe4>
 8000b86:	21fe      	movs	r1, #254	; 0xfe
 8000b88:	68b8      	ldr	r0, [r7, #8]
 8000b8a:	f7ff fdc1 	bl	8000710 <SD_TxDataBlock>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d033      	beq.n	8000bfc <SD_disk_write+0xe4>
			count = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	e030      	b.n	8000bfc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000b9a:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <SD_disk_write+0x104>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d007      	beq.n	8000bb6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2077      	movs	r0, #119	; 0x77
 8000baa:	f7ff fdf4 	bl	8000796 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000bae:	6839      	ldr	r1, [r7, #0]
 8000bb0:	2057      	movs	r0, #87	; 0x57
 8000bb2:	f7ff fdf0 	bl	8000796 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	2059      	movs	r0, #89	; 0x59
 8000bba:	f7ff fdec 	bl	8000796 <SD_SendCmd>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d11b      	bne.n	8000bfc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bc4:	21fc      	movs	r1, #252	; 0xfc
 8000bc6:	68b8      	ldr	r0, [r7, #8]
 8000bc8:	f7ff fda2 	bl	8000710 <SD_TxDataBlock>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d00a      	beq.n	8000be8 <SD_disk_write+0xd0>
				buff += 512;
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bd8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1ee      	bne.n	8000bc4 <SD_disk_write+0xac>
 8000be6:	e000      	b.n	8000bea <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000be8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000bea:	21fd      	movs	r1, #253	; 0xfd
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fd8f 	bl	8000710 <SD_TxDataBlock>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d101      	bne.n	8000bfc <SD_disk_write+0xe4>
			{
				count = 1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000bfc:	f7ff fc79 	bl	80004f2 <DESELECT>
	SPI_RxByte();
 8000c00:	f7ff fcb8 	bl	8000574 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	bf14      	ite	ne
 8000c0a:	2301      	movne	r3, #1
 8000c0c:	2300      	moveq	r3, #0
 8000c0e:	b2db      	uxtb	r3, r3
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000040 	.word	0x20000040

08000c20 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b08b      	sub	sp, #44	; 0x2c
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	603a      	str	r2, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SD_disk_ioctl+0x1e>
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	e115      	b.n	8000e6a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000c44:	79bb      	ldrb	r3, [r7, #6]
 8000c46:	2b05      	cmp	r3, #5
 8000c48:	d124      	bne.n	8000c94 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c4a:	6a3b      	ldr	r3, [r7, #32]
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d012      	beq.n	8000c78 <SD_disk_ioctl+0x58>
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	dc1a      	bgt.n	8000c8c <SD_disk_ioctl+0x6c>
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d002      	beq.n	8000c60 <SD_disk_ioctl+0x40>
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d006      	beq.n	8000c6c <SD_disk_ioctl+0x4c>
 8000c5e:	e015      	b.n	8000c8c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c60:	f7ff fd0e 	bl	8000680 <SD_PowerOff>
			res = RES_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c6a:	e0fc      	b.n	8000e66 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c6c:	f7ff fcc6 	bl	80005fc <SD_PowerOn>
			res = RES_OK;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c76:	e0f6      	b.n	8000e66 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c78:	6a3b      	ldr	r3, [r7, #32]
 8000c7a:	1c5c      	adds	r4, r3, #1
 8000c7c:	f7ff fd0c 	bl	8000698 <SD_CheckPower>
 8000c80:	4603      	mov	r3, r0
 8000c82:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c8a:	e0ec      	b.n	8000e66 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c92:	e0e8      	b.n	8000e66 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c94:	4b77      	ldr	r3, [pc, #476]	; (8000e74 <SD_disk_ioctl+0x254>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SD_disk_ioctl+0x86>
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e0e1      	b.n	8000e6a <SD_disk_ioctl+0x24a>

		SELECT();
 8000ca6:	f7ff fc17 	bl	80004d8 <SELECT>

		switch (ctrl)
 8000caa:	79bb      	ldrb	r3, [r7, #6]
 8000cac:	2b0d      	cmp	r3, #13
 8000cae:	f200 80cb 	bhi.w	8000e48 <SD_disk_ioctl+0x228>
 8000cb2:	a201      	add	r2, pc, #4	; (adr r2, 8000cb8 <SD_disk_ioctl+0x98>)
 8000cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb8:	08000db3 	.word	0x08000db3
 8000cbc:	08000cf1 	.word	0x08000cf1
 8000cc0:	08000da3 	.word	0x08000da3
 8000cc4:	08000e49 	.word	0x08000e49
 8000cc8:	08000e49 	.word	0x08000e49
 8000ccc:	08000e49 	.word	0x08000e49
 8000cd0:	08000e49 	.word	0x08000e49
 8000cd4:	08000e49 	.word	0x08000e49
 8000cd8:	08000e49 	.word	0x08000e49
 8000cdc:	08000e49 	.word	0x08000e49
 8000ce0:	08000e49 	.word	0x08000e49
 8000ce4:	08000dc5 	.word	0x08000dc5
 8000ce8:	08000de9 	.word	0x08000de9
 8000cec:	08000e0d 	.word	0x08000e0d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2049      	movs	r0, #73	; 0x49
 8000cf4:	f7ff fd4f 	bl	8000796 <SD_SendCmd>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f040 80a8 	bne.w	8000e50 <SD_disk_ioctl+0x230>
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	2110      	movs	r1, #16
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fcd2 	bl	80006b0 <SD_RxDataBlock>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 809e 	beq.w	8000e50 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000d14:	7b3b      	ldrb	r3, [r7, #12]
 8000d16:	099b      	lsrs	r3, r3, #6
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d10e      	bne.n	8000d3c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d1e:	7d7b      	ldrb	r3, [r7, #21]
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	7d3b      	ldrb	r3, [r7, #20]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	021b      	lsls	r3, r3, #8
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	4413      	add	r3, r2
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	3301      	adds	r3, #1
 8000d30:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d32:	8bfb      	ldrh	r3, [r7, #30]
 8000d34:	029a      	lsls	r2, r3, #10
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	e02e      	b.n	8000d9a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d3c:	7c7b      	ldrb	r3, [r7, #17]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	7dbb      	ldrb	r3, [r7, #22]
 8000d46:	09db      	lsrs	r3, r3, #7
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	7d7b      	ldrb	r3, [r7, #21]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	f003 0306 	and.w	r3, r3, #6
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	4413      	add	r3, r2
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	3302      	adds	r3, #2
 8000d60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d64:	7d3b      	ldrb	r3, [r7, #20]
 8000d66:	099b      	lsrs	r3, r3, #6
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	7cfb      	ldrb	r3, [r7, #19]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	4413      	add	r3, r2
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	7cbb      	ldrb	r3, [r7, #18]
 8000d7a:	029b      	lsls	r3, r3, #10
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	4413      	add	r3, r2
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	3301      	adds	r3, #1
 8000d8a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d8c:	8bfa      	ldrh	r2, [r7, #30]
 8000d8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d92:	3b09      	subs	r3, #9
 8000d94:	409a      	lsls	r2, r3
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000da0:	e056      	b.n	8000e50 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000db0:	e055      	b.n	8000e5e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000db2:	f7ff fc09 	bl	80005c8 <SD_ReadyWait>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2bff      	cmp	r3, #255	; 0xff
 8000dba:	d14b      	bne.n	8000e54 <SD_disk_ioctl+0x234>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dc2:	e047      	b.n	8000e54 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2049      	movs	r0, #73	; 0x49
 8000dc8:	f7ff fce5 	bl	8000796 <SD_SendCmd>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d142      	bne.n	8000e58 <SD_disk_ioctl+0x238>
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	6a38      	ldr	r0, [r7, #32]
 8000dd6:	f7ff fc6b 	bl	80006b0 <SD_RxDataBlock>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d03b      	beq.n	8000e58 <SD_disk_ioctl+0x238>
 8000de0:	2300      	movs	r3, #0
 8000de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000de6:	e037      	b.n	8000e58 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000de8:	2100      	movs	r1, #0
 8000dea:	204a      	movs	r0, #74	; 0x4a
 8000dec:	f7ff fcd3 	bl	8000796 <SD_SendCmd>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d132      	bne.n	8000e5c <SD_disk_ioctl+0x23c>
 8000df6:	2110      	movs	r1, #16
 8000df8:	6a38      	ldr	r0, [r7, #32]
 8000dfa:	f7ff fc59 	bl	80006b0 <SD_RxDataBlock>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d02b      	beq.n	8000e5c <SD_disk_ioctl+0x23c>
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e0a:	e027      	b.n	8000e5c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	207a      	movs	r0, #122	; 0x7a
 8000e10:	f7ff fcc1 	bl	8000796 <SD_SendCmd>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d116      	bne.n	8000e48 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e20:	e00b      	b.n	8000e3a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000e22:	6a3c      	ldr	r4, [r7, #32]
 8000e24:	1c63      	adds	r3, r4, #1
 8000e26:	623b      	str	r3, [r7, #32]
 8000e28:	f7ff fba4 	bl	8000574 <SPI_RxByte>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e34:	3301      	adds	r3, #1
 8000e36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d9ef      	bls.n	8000e22 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e4e:	e006      	b.n	8000e5e <SD_disk_ioctl+0x23e>
			break;
 8000e50:	bf00      	nop
 8000e52:	e004      	b.n	8000e5e <SD_disk_ioctl+0x23e>
			break;
 8000e54:	bf00      	nop
 8000e56:	e002      	b.n	8000e5e <SD_disk_ioctl+0x23e>
			break;
 8000e58:	bf00      	nop
 8000e5a:	e000      	b.n	8000e5e <SD_disk_ioctl+0x23e>
			break;
 8000e5c:	bf00      	nop
		}

		DESELECT();
 8000e5e:	f7ff fb48 	bl	80004f2 <DESELECT>
		SPI_RxByte();
 8000e62:	f7ff fb87 	bl	8000574 <SPI_RxByte>
	}

	return res;
 8000e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	372c      	adds	r7, #44	; 0x2c
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd90      	pop	{r4, r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000000 	.word	0x20000000

08000e78 <send_uart>:
{
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
}

void send_uart (char *string)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff f9a3 	bl	80001cc <strlen>
 8000e86:	4603      	mov	r3, r0
 8000e88:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <send_uart+0x2c>)
 8000e96:	f002 fd63 	bl	8003960 <HAL_UART_Transmit>
}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200000a8 	.word	0x200000a8

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eac:	f000 fac7 	bl	800143e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb0:	f000 f862 	bl	8000f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb4:	f000 f924 	bl	8001100 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000eb8:	f000 f8b4 	bl	8001024 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000ebc:	f003 fa1c 	bl	80042f8 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8000ec0:	f000 f8ee 	bl	80010a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  send_uart("Hello\r\n\r\n");
 8000ec4:	4820      	ldr	r0, [pc, #128]	; (8000f48 <main+0xa0>)
 8000ec6:	f7ff ffd7 	bl	8000e78 <send_uart>
  fresult = f_mount(&fs, "/", 1);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	491f      	ldr	r1, [pc, #124]	; (8000f4c <main+0xa4>)
 8000ece:	4820      	ldr	r0, [pc, #128]	; (8000f50 <main+0xa8>)
 8000ed0:	f003 ff0e 	bl	8004cf0 <f_mount>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <main+0xac>)
 8000eda:	701a      	strb	r2, [r3, #0]
  	if (fresult != FR_OK) send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8000edc:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <main+0xac>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <main+0x44>
 8000ee4:	481c      	ldr	r0, [pc, #112]	; (8000f58 <main+0xb0>)
 8000ee6:	f7ff ffc7 	bl	8000e78 <send_uart>
 8000eea:	e002      	b.n	8000ef2 <main+0x4a>
  	else send_uart("SD CARD mounted successfully...\n\n");
 8000eec:	481b      	ldr	r0, [pc, #108]	; (8000f5c <main+0xb4>)
 8000eee:	f7ff ffc3 	bl	8000e78 <send_uart>
  	if(fresult == FR_INVALID_DRIVE)
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <main+0xac>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b0b      	cmp	r3, #11
 8000ef8:	d102      	bne.n	8000f00 <main+0x58>
  		send_uart("FR_INVALID_DRIVE");
 8000efa:	4819      	ldr	r0, [pc, #100]	; (8000f60 <main+0xb8>)
 8000efc:	f7ff ffbc 	bl	8000e78 <send_uart>
  	if(fresult == FR_DISK_ERR)
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <main+0xac>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d102      	bne.n	8000f0e <main+0x66>
  	  	send_uart("FR_DISK_ERR");
 8000f08:	4816      	ldr	r0, [pc, #88]	; (8000f64 <main+0xbc>)
 8000f0a:	f7ff ffb5 	bl	8000e78 <send_uart>
  	if(fresult == FR_NOT_READY)
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <main+0xac>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d102      	bne.n	8000f1c <main+0x74>
  	  	send_uart("FR_NOT_READY");
 8000f16:	4814      	ldr	r0, [pc, #80]	; (8000f68 <main+0xc0>)
 8000f18:	f7ff ffae 	bl	8000e78 <send_uart>
  	if(fresult == FR_NOT_ENABLED)
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <main+0xac>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b0c      	cmp	r3, #12
 8000f22:	d102      	bne.n	8000f2a <main+0x82>
  	  	send_uart("FR_NOT_ENABLED");
 8000f24:	4811      	ldr	r0, [pc, #68]	; (8000f6c <main+0xc4>)
 8000f26:	f7ff ffa7 	bl	8000e78 <send_uart>
  	if(fresult == FR_NO_FILESYSTEM)
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <main+0xac>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b0d      	cmp	r3, #13
 8000f30:	d102      	bne.n	8000f38 <main+0x90>
  	  	send_uart("FR_NO_FILESYSTEM");
 8000f32:	480f      	ldr	r0, [pc, #60]	; (8000f70 <main+0xc8>)
 8000f34:	f7ff ffa0 	bl	8000e78 <send_uart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  send_uart("Loop\r\n\r\n");
 8000f38:	480e      	ldr	r0, [pc, #56]	; (8000f74 <main+0xcc>)
 8000f3a:	f7ff ff9d 	bl	8000e78 <send_uart>
	  HAL_Delay(60000);
 8000f3e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000f42:	f000 faf1 	bl	8001528 <HAL_Delay>
	  send_uart("Loop\r\n\r\n");
 8000f46:	e7f7      	b.n	8000f38 <main+0x90>
 8000f48:	08004ea4 	.word	0x08004ea4
 8000f4c:	08004eb0 	.word	0x08004eb0
 8000f50:	20000130 	.word	0x20000130
 8000f54:	20001168 	.word	0x20001168
 8000f58:	08004eb4 	.word	0x08004eb4
 8000f5c:	08004ed8 	.word	0x08004ed8
 8000f60:	08004efc 	.word	0x08004efc
 8000f64:	08004f10 	.word	0x08004f10
 8000f68:	08004f1c 	.word	0x08004f1c
 8000f6c:	08004f2c 	.word	0x08004f2c
 8000f70:	08004f3c 	.word	0x08004f3c
 8000f74:	08004f50 	.word	0x08004f50

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b096      	sub	sp, #88	; 0x58
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	2244      	movs	r2, #68	; 0x44
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f003 ff53 	bl	8004e32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f9e:	f000 fd6d 	bl	8001a7c <HAL_PWREx_ControlVoltageScaling>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fa8:	f000 f8e8 	bl	800117c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fac:	f000 fd48 	bl	8001a40 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <SystemClock_Config+0xa8>)
 8000fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fb6:	4a1a      	ldr	r2, [pc, #104]	; (8001020 <SystemClock_Config+0xa8>)
 8000fb8:	f023 0318 	bic.w	r3, r3, #24
 8000fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000fc0:	2314      	movs	r3, #20
 8000fc2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fd0:	2360      	movs	r3, #96	; 0x60
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 fda3 	bl	8001b28 <HAL_RCC_OscConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000fe8:	f000 f8c8 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fec:	230f      	movs	r3, #15
 8000fee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f001 f9a3 	bl	8002350 <HAL_RCC_ClockConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001010:	f000 f8b4 	bl	800117c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001014:	f001 fdb6 	bl	8002b84 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001018:	bf00      	nop
 800101a:	3758      	adds	r7, #88	; 0x58
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40021000 	.word	0x40021000

08001024 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001028:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <MX_SPI1_Init+0x74>)
 800102a:	4a1c      	ldr	r2, [pc, #112]	; (800109c <MX_SPI1_Init+0x78>)
 800102c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800102e:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <MX_SPI1_Init+0x74>)
 8001030:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001034:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001036:	4b18      	ldr	r3, [pc, #96]	; (8001098 <MX_SPI1_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800103c:	4b16      	ldr	r3, [pc, #88]	; (8001098 <MX_SPI1_Init+0x74>)
 800103e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001042:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <MX_SPI1_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <MX_SPI1_Init+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_SPI1_Init+0x74>)
 8001052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001056:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MX_SPI1_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_SPI1_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_SPI1_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <MX_SPI1_Init+0x74>)
 800106c:	2200      	movs	r2, #0
 800106e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_SPI1_Init+0x74>)
 8001072:	2207      	movs	r2, #7
 8001074:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <MX_SPI1_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_SPI1_Init+0x74>)
 800107e:	2208      	movs	r2, #8
 8001080:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_SPI1_Init+0x74>)
 8001084:	f001 fe80 	bl	8002d88 <HAL_SPI_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800108e:	f000 f875 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000044 	.word	0x20000044
 800109c:	40013000 	.word	0x40013000

080010a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010a6:	4a15      	ldr	r2, [pc, #84]	; (80010fc <MX_USART2_UART_Init+0x5c>)
 80010a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010c6:	220c      	movs	r2, #12
 80010c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010e4:	f002 fbee 	bl	80038c4 <HAL_UART_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010ee:	f000 f845 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200000a8 	.word	0x200000a8
 80010fc:	40004400 	.word	0x40004400

08001100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001116:	4b18      	ldr	r3, [pc, #96]	; (8001178 <MX_GPIO_Init+0x78>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a17      	ldr	r2, [pc, #92]	; (8001178 <MX_GPIO_Init+0x78>)
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_GPIO_Init+0x78>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_GPIO_Init+0x78>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a11      	ldr	r2, [pc, #68]	; (8001178 <MX_GPIO_Init+0x78>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_GPIO_Init+0x78>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2110      	movs	r1, #16
 800114a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114e:	f000 fc5f 	bl	8001a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001152:	2310      	movs	r3, #16
 8001154:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	2301      	movs	r3, #1
 8001158:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f000 fae6 	bl	800173c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40021000 	.word	0x40021000

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	e7fe      	b.n	8001184 <Error_Handler+0x8>
	...

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_MspInit+0x44>)
 8001190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_MspInit+0x44>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6613      	str	r3, [r2, #96]	; 0x60
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_MspInit+0x44>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_MspInit+0x44>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_MspInit+0x44>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	6593      	str	r3, [r2, #88]	; 0x58
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_MspInit+0x44>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000

080011d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a17      	ldr	r2, [pc, #92]	; (800124c <HAL_SPI_MspInit+0x7c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d128      	bne.n	8001244 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <HAL_SPI_MspInit+0x80>)
 80011f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f6:	4a16      	ldr	r2, [pc, #88]	; (8001250 <HAL_SPI_MspInit+0x80>)
 80011f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011fc:	6613      	str	r3, [r2, #96]	; 0x60
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <HAL_SPI_MspInit+0x80>)
 8001200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_SPI_MspInit+0x80>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a10      	ldr	r2, [pc, #64]	; (8001250 <HAL_SPI_MspInit+0x80>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_SPI_MspInit+0x80>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001222:	23e0      	movs	r3, #224	; 0xe0
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001232:	2305      	movs	r3, #5
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001240:	f000 fa7c 	bl	800173c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001244:	bf00      	nop
 8001246:	3728      	adds	r7, #40	; 0x28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40013000 	.word	0x40013000
 8001250:	40021000 	.word	0x40021000

08001254 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b09e      	sub	sp, #120	; 0x78
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	2254      	movs	r2, #84	; 0x54
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f003 fddc 	bl	8004e32 <memset>
  if(huart->Instance==USART2)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a1f      	ldr	r2, [pc, #124]	; (80012fc <HAL_UART_MspInit+0xa8>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d136      	bne.n	80012f2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001284:	2302      	movs	r3, #2
 8001286:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001288:	2300      	movs	r3, #0
 800128a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4618      	mov	r0, r3
 8001292:	f001 fa81 	bl	8002798 <HAL_RCCEx_PeriphCLKConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800129c:	f7ff ff6e 	bl	800117c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_UART_MspInit+0xac>)
 80012a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a4:	4a16      	ldr	r2, [pc, #88]	; (8001300 <HAL_UART_MspInit+0xac>)
 80012a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012aa:	6593      	str	r3, [r2, #88]	; 0x58
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_UART_MspInit+0xac>)
 80012ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_UART_MspInit+0xac>)
 80012ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012bc:	4a10      	ldr	r2, [pc, #64]	; (8001300 <HAL_UART_MspInit+0xac>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_UART_MspInit+0xac>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012d0:	230c      	movs	r3, #12
 80012d2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012e0:	2307      	movs	r3, #7
 80012e2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012e8:	4619      	mov	r1, r3
 80012ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ee:	f000 fa25 	bl	800173c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3778      	adds	r7, #120	; 0x78
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40004400 	.word	0x40004400
 8001300:	40021000 	.word	0x40021000

08001304 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void){
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <SDTimer_Handler+0x40>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d006      	beq.n	8001320 <SDTimer_Handler+0x1c>
		Timer1--;
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <SDTimer_Handler+0x40>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	3b01      	subs	r3, #1
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <SDTimer_Handler+0x40>)
 800131e:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <SDTimer_Handler+0x44>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <SDTimer_Handler+0x34>
		Timer2--;
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <SDTimer_Handler+0x44>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	3b01      	subs	r3, #1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <SDTimer_Handler+0x44>)
 8001336:	701a      	strb	r2, [r3, #0]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	2000116a 	.word	0x2000116a
 8001348:	2000116b 	.word	0x2000116b

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <NMI_Handler+0x4>

08001352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler+0x4>

08001358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <MemManage_Handler+0x4>

0800135e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <UsageFault_Handler+0x4>

0800136a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <SysTick_Handler+0x30>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	3301      	adds	r3, #1
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <SysTick_Handler+0x30>)
 80013a4:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10){
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <SysTick_Handler+0x30>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b09      	cmp	r3, #9
 80013ae:	d904      	bls.n	80013ba <SysTick_Handler+0x26>
		FatFsCnt = 0;
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <SysTick_Handler+0x30>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80013b6:	f7ff ffa5 	bl	8001304 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ba:	f000 f895 	bl	80014e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20001169 	.word	0x20001169

080013c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <SystemInit+0x20>)
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <SystemInit+0x20>)
 80013d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001424 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013f0:	f7ff ffea 	bl	80013c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <LoopForever+0x6>)
  ldr r1, =_edata
 80013f6:	490d      	ldr	r1, [pc, #52]	; (800142c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013f8:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <LoopForever+0xe>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013fc:	e002      	b.n	8001404 <LoopCopyDataInit>

080013fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001402:	3304      	adds	r3, #4

08001404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001408:	d3f9      	bcc.n	80013fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <LoopForever+0x12>)
  ldr r4, =_ebss
 800140c:	4c0a      	ldr	r4, [pc, #40]	; (8001438 <LoopForever+0x16>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001410:	e001      	b.n	8001416 <LoopFillZerobss>

08001412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001414:	3204      	adds	r2, #4

08001416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001418:	d3fb      	bcc.n	8001412 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800141a:	f003 fd13 	bl	8004e44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800141e:	f7ff fd43 	bl	8000ea8 <main>

08001422 <LoopForever>:

LoopForever:
    b LoopForever
 8001422:	e7fe      	b.n	8001422 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001424:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800142c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001430:	08004fb4 	.word	0x08004fb4
  ldr r2, =_sbss
 8001434:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001438:	200013ac 	.word	0x200013ac

0800143c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800143c:	e7fe      	b.n	800143c <ADC1_IRQHandler>

0800143e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001448:	2003      	movs	r0, #3
 800144a:	f000 f943 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800144e:	200f      	movs	r0, #15
 8001450:	f000 f80e 	bl	8001470 <HAL_InitTick>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	71fb      	strb	r3, [r7, #7]
 800145e:	e001      	b.n	8001464 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001460:	f7ff fe92 	bl	8001188 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001464:	79fb      	ldrb	r3, [r7, #7]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <HAL_InitTick+0x6c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d023      	beq.n	80014cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <HAL_InitTick+0x70>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <HAL_InitTick+0x6c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001492:	fbb3 f3f1 	udiv	r3, r3, r1
 8001496:	fbb2 f3f3 	udiv	r3, r2, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f941 	bl	8001722 <HAL_SYSTICK_Config>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10f      	bne.n	80014c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b0f      	cmp	r3, #15
 80014aa:	d809      	bhi.n	80014c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ac:	2200      	movs	r2, #0
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b4:	f000 f919 	bl	80016ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014b8:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <HAL_InitTick+0x74>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e007      	b.n	80014d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
 80014c4:	e004      	b.n	80014d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	e001      	b.n	80014d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000000c 	.word	0x2000000c
 80014e0:	20000004 	.word	0x20000004
 80014e4:	20000008 	.word	0x20000008

080014e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_IncTick+0x20>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_IncTick+0x24>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a04      	ldr	r2, [pc, #16]	; (800150c <HAL_IncTick+0x24>)
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	2000000c 	.word	0x2000000c
 800150c:	2000116c 	.word	0x2000116c

08001510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return uwTick;
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <HAL_GetTick+0x14>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	2000116c 	.word	0x2000116c

08001528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001530:	f7ff ffee 	bl	8001510 <HAL_GetTick>
 8001534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001540:	d005      	beq.n	800154e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_Delay+0x44>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4413      	add	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800154e:	bf00      	nop
 8001550:	f7ff ffde 	bl	8001510 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	429a      	cmp	r2, r3
 800155e:	d8f7      	bhi.n	8001550 <HAL_Delay+0x28>
  {
  }
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	2000000c 	.word	0x2000000c

08001570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800158c:	4013      	ands	r3, r2
 800158e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001598:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800159c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a2:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	60d3      	str	r3, [r2, #12]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <__NVIC_GetPriorityGrouping+0x18>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	f003 0307 	and.w	r3, r3, #7
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db0a      	blt.n	80015fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	490c      	ldr	r1, [pc, #48]	; (8001620 <__NVIC_SetPriority+0x4c>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015fc:	e00a      	b.n	8001614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4908      	ldr	r1, [pc, #32]	; (8001624 <__NVIC_SetPriority+0x50>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	3b04      	subs	r3, #4
 800160c:	0112      	lsls	r2, r2, #4
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	440b      	add	r3, r1
 8001612:	761a      	strb	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf28      	it	cs
 8001646:	2304      	movcs	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3304      	adds	r3, #4
 800164e:	2b06      	cmp	r3, #6
 8001650:	d902      	bls.n	8001658 <NVIC_EncodePriority+0x30>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3b03      	subs	r3, #3
 8001656:	e000      	b.n	800165a <NVIC_EncodePriority+0x32>
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43d9      	mvns	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	4313      	orrs	r3, r2
         );
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	; 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016b4:	f7ff ff8e 	bl	80015d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff47 	bl	8001570 <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff5c 	bl	80015b8 <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff8e 	bl	8001628 <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5d 	bl	80015d4 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ffb0 	bl	8001690 <SysTick_Config>
 8001730:	4603      	mov	r3, r0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174a:	e148      	b.n	80019de <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	2101      	movs	r1, #1
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	4013      	ands	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 813a 	beq.w	80019d8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b01      	cmp	r3, #1
 800176e:	d005      	beq.n	800177c <HAL_GPIO_Init+0x40>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d130      	bne.n	80017de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017b2:	2201      	movs	r2, #1
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	f003 0201 	and.w	r2, r3, #1
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d017      	beq.n	800181a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d123      	bne.n	800186e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	08da      	lsrs	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3208      	adds	r2, #8
 800182e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	220f      	movs	r2, #15
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3208      	adds	r2, #8
 8001868:	6939      	ldr	r1, [r7, #16]
 800186a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	2203      	movs	r2, #3
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 0203 	and.w	r2, r3, #3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 8094 	beq.w	80019d8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b0:	4b52      	ldr	r3, [pc, #328]	; (80019fc <HAL_GPIO_Init+0x2c0>)
 80018b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b4:	4a51      	ldr	r2, [pc, #324]	; (80019fc <HAL_GPIO_Init+0x2c0>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6613      	str	r3, [r2, #96]	; 0x60
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <HAL_GPIO_Init+0x2c0>)
 80018be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018c8:	4a4d      	ldr	r2, [pc, #308]	; (8001a00 <HAL_GPIO_Init+0x2c4>)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	3302      	adds	r3, #2
 80018d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	220f      	movs	r2, #15
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018f2:	d00d      	beq.n	8001910 <HAL_GPIO_Init+0x1d4>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a43      	ldr	r2, [pc, #268]	; (8001a04 <HAL_GPIO_Init+0x2c8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d007      	beq.n	800190c <HAL_GPIO_Init+0x1d0>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a42      	ldr	r2, [pc, #264]	; (8001a08 <HAL_GPIO_Init+0x2cc>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d101      	bne.n	8001908 <HAL_GPIO_Init+0x1cc>
 8001904:	2302      	movs	r3, #2
 8001906:	e004      	b.n	8001912 <HAL_GPIO_Init+0x1d6>
 8001908:	2307      	movs	r3, #7
 800190a:	e002      	b.n	8001912 <HAL_GPIO_Init+0x1d6>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <HAL_GPIO_Init+0x1d6>
 8001910:	2300      	movs	r3, #0
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	f002 0203 	and.w	r2, r2, #3
 8001918:	0092      	lsls	r2, r2, #2
 800191a:	4093      	lsls	r3, r2
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001922:	4937      	ldr	r1, [pc, #220]	; (8001a00 <HAL_GPIO_Init+0x2c4>)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	3302      	adds	r3, #2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001930:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <HAL_GPIO_Init+0x2d0>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001954:	4a2d      	ldr	r2, [pc, #180]	; (8001a0c <HAL_GPIO_Init+0x2d0>)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800195a:	4b2c      	ldr	r3, [pc, #176]	; (8001a0c <HAL_GPIO_Init+0x2d0>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800197e:	4a23      	ldr	r2, [pc, #140]	; (8001a0c <HAL_GPIO_Init+0x2d0>)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001984:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <HAL_GPIO_Init+0x2d0>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019a8:	4a18      	ldr	r2, [pc, #96]	; (8001a0c <HAL_GPIO_Init+0x2d0>)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <HAL_GPIO_Init+0x2d0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019d2:	4a0e      	ldr	r2, [pc, #56]	; (8001a0c <HAL_GPIO_Init+0x2d0>)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	3301      	adds	r3, #1
 80019dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	fa22 f303 	lsr.w	r3, r2, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f47f aeaf 	bne.w	800174c <HAL_GPIO_Init+0x10>
  }
}
 80019ee:	bf00      	nop
 80019f0:	bf00      	nop
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010000 	.word	0x40010000
 8001a04:	48000400 	.word	0x48000400
 8001a08:	48000800 	.word	0x48000800
 8001a0c:	40010400 	.word	0x40010400

08001a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	807b      	strh	r3, [r7, #2]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a20:	787b      	ldrb	r3, [r7, #1]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a2c:	e002      	b.n	8001a34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a2e:	887a      	ldrh	r2, [r7, #2]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4e:	6013      	str	r3, [r2, #0]
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40007000 	.word	0x40007000

08001a60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40007000 	.word	0x40007000

08001a7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a8a:	d130      	bne.n	8001aee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a8c:	4b23      	ldr	r3, [pc, #140]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a98:	d038      	beq.n	8001b0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aa2:	4a1e      	ldr	r2, [pc, #120]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2232      	movs	r2, #50	; 0x32
 8001ab0:	fb02 f303 	mul.w	r3, r2, r3
 8001ab4:	4a1b      	ldr	r2, [pc, #108]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	0c9b      	lsrs	r3, r3, #18
 8001abc:	3301      	adds	r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ac0:	e002      	b.n	8001ac8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ac8:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad4:	d102      	bne.n	8001adc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f2      	bne.n	8001ac2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae8:	d110      	bne.n	8001b0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e00f      	b.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001afa:	d007      	beq.n	8001b0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b04:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40007000 	.word	0x40007000
 8001b20:	20000004 	.word	0x20000004
 8001b24:	431bde83 	.word	0x431bde83

08001b28 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d102      	bne.n	8001b3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	f000 bc02 	b.w	8002340 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b3c:	4b96      	ldr	r3, [pc, #600]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 030c 	and.w	r3, r3, #12
 8001b44:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b46:	4b94      	ldr	r3, [pc, #592]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80e4 	beq.w	8001d26 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <HAL_RCC_OscConfig+0x4c>
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	2b0c      	cmp	r3, #12
 8001b68:	f040 808b 	bne.w	8001c82 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	f040 8087 	bne.w	8001c82 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b74:	4b88      	ldr	r3, [pc, #544]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_OscConfig+0x64>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e3d9      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1a      	ldr	r2, [r3, #32]
 8001b90:	4b81      	ldr	r3, [pc, #516]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d004      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x7e>
 8001b9c:	4b7e      	ldr	r3, [pc, #504]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ba4:	e005      	b.n	8001bb2 <HAL_RCC_OscConfig+0x8a>
 8001ba6:	4b7c      	ldr	r3, [pc, #496]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d223      	bcs.n	8001bfe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 fd8c 	bl	80026d8 <RCC_SetFlashLatencyFromMSIRange>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e3ba      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bca:	4b73      	ldr	r3, [pc, #460]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a72      	ldr	r2, [pc, #456]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	f043 0308 	orr.w	r3, r3, #8
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b70      	ldr	r3, [pc, #448]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	496d      	ldr	r1, [pc, #436]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001be8:	4b6b      	ldr	r3, [pc, #428]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	4968      	ldr	r1, [pc, #416]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
 8001bfc:	e025      	b.n	8001c4a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bfe:	4b66      	ldr	r3, [pc, #408]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a65      	ldr	r2, [pc, #404]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001c04:	f043 0308 	orr.w	r3, r3, #8
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b63      	ldr	r3, [pc, #396]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	4960      	ldr	r1, [pc, #384]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c1c:	4b5e      	ldr	r3, [pc, #376]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	495b      	ldr	r1, [pc, #364]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 fd4c 	bl	80026d8 <RCC_SetFlashLatencyFromMSIRange>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e37a      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c4a:	f000 fc81 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	4b51      	ldr	r3, [pc, #324]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	4950      	ldr	r1, [pc, #320]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001c5c:	5ccb      	ldrb	r3, [r1, r3]
 8001c5e:	f003 031f 	and.w	r3, r3, #31
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	4a4e      	ldr	r2, [pc, #312]	; (8001da0 <HAL_RCC_OscConfig+0x278>)
 8001c68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c6a:	4b4e      	ldr	r3, [pc, #312]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fbfe 	bl	8001470 <HAL_InitTick>
 8001c74:	4603      	mov	r3, r0
 8001c76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d052      	beq.n	8001d24 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	e35e      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d032      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c8a:	4b43      	ldr	r3, [pc, #268]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a42      	ldr	r2, [pc, #264]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c96:	f7ff fc3b 	bl	8001510 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c9e:	f7ff fc37 	bl	8001510 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e347      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cb0:	4b39      	ldr	r3, [pc, #228]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cbc:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a35      	ldr	r2, [pc, #212]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	f043 0308 	orr.w	r3, r3, #8
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b33      	ldr	r3, [pc, #204]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4930      	ldr	r1, [pc, #192]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cda:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	492b      	ldr	r1, [pc, #172]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	604b      	str	r3, [r1, #4]
 8001cee:	e01a      	b.n	8001d26 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cf0:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a28      	ldr	r2, [pc, #160]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	f023 0301 	bic.w	r3, r3, #1
 8001cfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fc08 	bl	8001510 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d04:	f7ff fc04 	bl	8001510 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e314      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x1dc>
 8001d22:	e000      	b.n	8001d26 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d073      	beq.n	8001e1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_OscConfig+0x21c>
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2b0c      	cmp	r3, #12
 8001d3c:	d10e      	bne.n	8001d5c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d10b      	bne.n	8001d5c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d063      	beq.n	8001e18 <HAL_RCC_OscConfig+0x2f0>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d15f      	bne.n	8001e18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e2f1      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d64:	d106      	bne.n	8001d74 <HAL_RCC_OscConfig+0x24c>
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e025      	b.n	8001dc0 <HAL_RCC_OscConfig+0x298>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d7c:	d114      	bne.n	8001da8 <HAL_RCC_OscConfig+0x280>
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a02      	ldr	r2, [pc, #8]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e013      	b.n	8001dc0 <HAL_RCC_OscConfig+0x298>
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	08004f5c 	.word	0x08004f5c
 8001da0:	20000004 	.word	0x20000004
 8001da4:	20000008 	.word	0x20000008
 8001da8:	4ba0      	ldr	r3, [pc, #640]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a9f      	ldr	r2, [pc, #636]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b9d      	ldr	r3, [pc, #628]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a9c      	ldr	r2, [pc, #624]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fba2 	bl	8001510 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff fb9e 	bl	8001510 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e2ae      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de2:	4b92      	ldr	r3, [pc, #584]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x2a8>
 8001dee:	e014      	b.n	8001e1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7ff fb8e 	bl	8001510 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff fb8a 	bl	8001510 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e29a      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e0a:	4b88      	ldr	r3, [pc, #544]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x2d0>
 8001e16:	e000      	b.n	8001e1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d060      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_OscConfig+0x310>
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	d119      	bne.n	8001e66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d116      	bne.n	8001e66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e38:	4b7c      	ldr	r3, [pc, #496]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_RCC_OscConfig+0x328>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e277      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e50:	4b76      	ldr	r3, [pc, #472]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	4973      	ldr	r1, [pc, #460]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e64:	e040      	b.n	8001ee8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d023      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e6e:	4b6f      	ldr	r3, [pc, #444]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a6e      	ldr	r2, [pc, #440]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7a:	f7ff fb49 	bl	8001510 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e82:	f7ff fb45 	bl	8001510 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e255      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e94:	4b65      	ldr	r3, [pc, #404]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea0:	4b62      	ldr	r3, [pc, #392]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	061b      	lsls	r3, r3, #24
 8001eae:	495f      	ldr	r1, [pc, #380]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
 8001eb4:	e018      	b.n	8001ee8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb6:	4b5d      	ldr	r3, [pc, #372]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a5c      	ldr	r2, [pc, #368]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7ff fb25 	bl	8001510 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eca:	f7ff fb21 	bl	8001510 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e231      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001edc:	4b53      	ldr	r3, [pc, #332]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f0      	bne.n	8001eca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d03c      	beq.n	8001f6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01c      	beq.n	8001f36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efc:	4b4b      	ldr	r3, [pc, #300]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f02:	4a4a      	ldr	r2, [pc, #296]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0c:	f7ff fb00 	bl	8001510 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f14:	f7ff fafc 	bl	8001510 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e20c      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f26:	4b41      	ldr	r3, [pc, #260]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0ef      	beq.n	8001f14 <HAL_RCC_OscConfig+0x3ec>
 8001f34:	e01b      	b.n	8001f6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f36:	4b3d      	ldr	r3, [pc, #244]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3c:	4a3b      	ldr	r2, [pc, #236]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001f3e:	f023 0301 	bic.w	r3, r3, #1
 8001f42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f46:	f7ff fae3 	bl	8001510 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4e:	f7ff fadf 	bl	8001510 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e1ef      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f60:	4b32      	ldr	r3, [pc, #200]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1ef      	bne.n	8001f4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80a6 	beq.w	80020c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f80:	4b2a      	ldr	r3, [pc, #168]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10d      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8c:	4b27      	ldr	r3, [pc, #156]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f90:	4a26      	ldr	r2, [pc, #152]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f96:	6593      	str	r3, [r2, #88]	; 0x58
 8001f98:	4b24      	ldr	r3, [pc, #144]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa8:	4b21      	ldr	r3, [pc, #132]	; (8002030 <HAL_RCC_OscConfig+0x508>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d118      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fb4:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <HAL_RCC_OscConfig+0x508>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <HAL_RCC_OscConfig+0x508>)
 8001fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc0:	f7ff faa6 	bl	8001510 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc8:	f7ff faa2 	bl	8001510 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e1b2      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_RCC_OscConfig+0x508>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d108      	bne.n	8002000 <HAL_RCC_OscConfig+0x4d8>
 8001fee:	4b0f      	ldr	r3, [pc, #60]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ffe:	e029      	b.n	8002054 <HAL_RCC_OscConfig+0x52c>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b05      	cmp	r3, #5
 8002006:	d115      	bne.n	8002034 <HAL_RCC_OscConfig+0x50c>
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <HAL_RCC_OscConfig+0x504>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200e:	4a07      	ldr	r2, [pc, #28]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8002010:	f043 0304 	orr.w	r3, r3, #4
 8002014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <HAL_RCC_OscConfig+0x504>)
 800201a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201e:	4a03      	ldr	r2, [pc, #12]	; (800202c <HAL_RCC_OscConfig+0x504>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002028:	e014      	b.n	8002054 <HAL_RCC_OscConfig+0x52c>
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	40007000 	.word	0x40007000
 8002034:	4b9a      	ldr	r3, [pc, #616]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	4a99      	ldr	r2, [pc, #612]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002044:	4b96      	ldr	r3, [pc, #600]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204a:	4a95      	ldr	r2, [pc, #596]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 800204c:	f023 0304 	bic.w	r3, r3, #4
 8002050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d016      	beq.n	800208a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7ff fa58 	bl	8001510 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002062:	e00a      	b.n	800207a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002064:	f7ff fa54 	bl	8001510 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e162      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207a:	4b89      	ldr	r3, [pc, #548]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0ed      	beq.n	8002064 <HAL_RCC_OscConfig+0x53c>
 8002088:	e015      	b.n	80020b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208a:	f7ff fa41 	bl	8001510 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002090:	e00a      	b.n	80020a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002092:	f7ff fa3d 	bl	8001510 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e14b      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020a8:	4b7d      	ldr	r3, [pc, #500]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1ed      	bne.n	8002092 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020b6:	7ffb      	ldrb	r3, [r7, #31]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d105      	bne.n	80020c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020bc:	4b78      	ldr	r3, [pc, #480]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 80020be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c0:	4a77      	ldr	r2, [pc, #476]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 80020c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d03c      	beq.n	800214e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01c      	beq.n	8002116 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020dc:	4b70      	ldr	r3, [pc, #448]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 80020de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e2:	4a6f      	ldr	r2, [pc, #444]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ec:	f7ff fa10 	bl	8001510 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020f4:	f7ff fa0c 	bl	8001510 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e11c      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002106:	4b66      	ldr	r3, [pc, #408]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 8002108:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0ef      	beq.n	80020f4 <HAL_RCC_OscConfig+0x5cc>
 8002114:	e01b      	b.n	800214e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002116:	4b62      	ldr	r3, [pc, #392]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 8002118:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800211c:	4a60      	ldr	r2, [pc, #384]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 800211e:	f023 0301 	bic.w	r3, r3, #1
 8002122:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002126:	f7ff f9f3 	bl	8001510 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800212e:	f7ff f9ef 	bl	8001510 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0ff      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002140:	4b57      	ldr	r3, [pc, #348]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 8002142:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1ef      	bne.n	800212e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 80f3 	beq.w	800233e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	2b02      	cmp	r3, #2
 800215e:	f040 80c9 	bne.w	80022f4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002162:	4b4f      	ldr	r3, [pc, #316]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f003 0203 	and.w	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	429a      	cmp	r2, r3
 8002174:	d12c      	bne.n	80021d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	3b01      	subs	r3, #1
 8002182:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002184:	429a      	cmp	r2, r3
 8002186:	d123      	bne.n	80021d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002192:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002194:	429a      	cmp	r2, r3
 8002196:	d11b      	bne.n	80021d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d113      	bne.n	80021d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b2:	085b      	lsrs	r3, r3, #1
 80021b4:	3b01      	subs	r3, #1
 80021b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d109      	bne.n	80021d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	085b      	lsrs	r3, r3, #1
 80021c8:	3b01      	subs	r3, #1
 80021ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d06b      	beq.n	80022a8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	2b0c      	cmp	r3, #12
 80021d4:	d062      	beq.n	800229c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021d6:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e0ac      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021e6:	4b2e      	ldr	r3, [pc, #184]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a2d      	ldr	r2, [pc, #180]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 80021ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021f2:	f7ff f98d 	bl	8001510 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fa:	f7ff f989 	bl	8001510 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e099      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800220c:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f0      	bne.n	80021fa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002218:	4b21      	ldr	r3, [pc, #132]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <HAL_RCC_OscConfig+0x77c>)
 800221e:	4013      	ands	r3, r2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002228:	3a01      	subs	r2, #1
 800222a:	0112      	lsls	r2, r2, #4
 800222c:	4311      	orrs	r1, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002232:	0212      	lsls	r2, r2, #8
 8002234:	4311      	orrs	r1, r2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800223a:	0852      	lsrs	r2, r2, #1
 800223c:	3a01      	subs	r2, #1
 800223e:	0552      	lsls	r2, r2, #21
 8002240:	4311      	orrs	r1, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002246:	0852      	lsrs	r2, r2, #1
 8002248:	3a01      	subs	r2, #1
 800224a:	0652      	lsls	r2, r2, #25
 800224c:	4311      	orrs	r1, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002252:	06d2      	lsls	r2, r2, #27
 8002254:	430a      	orrs	r2, r1
 8002256:	4912      	ldr	r1, [pc, #72]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 8002258:	4313      	orrs	r3, r2
 800225a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a0f      	ldr	r2, [pc, #60]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 8002262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002266:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002268:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a0c      	ldr	r2, [pc, #48]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 800226e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002272:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002274:	f7ff f94c 	bl	8001510 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227c:	f7ff f948 	bl	8001510 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e058      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228e:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <HAL_RCC_OscConfig+0x778>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800229a:	e050      	b.n	800233e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e04f      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
 80022a0:	40021000 	.word	0x40021000
 80022a4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a8:	4b27      	ldr	r3, [pc, #156]	; (8002348 <HAL_RCC_OscConfig+0x820>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d144      	bne.n	800233e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022b4:	4b24      	ldr	r3, [pc, #144]	; (8002348 <HAL_RCC_OscConfig+0x820>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a23      	ldr	r2, [pc, #140]	; (8002348 <HAL_RCC_OscConfig+0x820>)
 80022ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022c0:	4b21      	ldr	r3, [pc, #132]	; (8002348 <HAL_RCC_OscConfig+0x820>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4a20      	ldr	r2, [pc, #128]	; (8002348 <HAL_RCC_OscConfig+0x820>)
 80022c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022cc:	f7ff f920 	bl	8001510 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d4:	f7ff f91c 	bl	8001510 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e02c      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e6:	4b18      	ldr	r3, [pc, #96]	; (8002348 <HAL_RCC_OscConfig+0x820>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x7ac>
 80022f2:	e024      	b.n	800233e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	2b0c      	cmp	r3, #12
 80022f8:	d01f      	beq.n	800233a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <HAL_RCC_OscConfig+0x820>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a12      	ldr	r2, [pc, #72]	; (8002348 <HAL_RCC_OscConfig+0x820>)
 8002300:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002306:	f7ff f903 	bl	8001510 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230e:	f7ff f8ff 	bl	8001510 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e00f      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_RCC_OscConfig+0x820>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f0      	bne.n	800230e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_RCC_OscConfig+0x820>)
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	4905      	ldr	r1, [pc, #20]	; (8002348 <HAL_RCC_OscConfig+0x820>)
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_RCC_OscConfig+0x824>)
 8002334:	4013      	ands	r3, r2
 8002336:	60cb      	str	r3, [r1, #12]
 8002338:	e001      	b.n	800233e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3720      	adds	r7, #32
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	feeefffc 	.word	0xfeeefffc

08002350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0e7      	b.n	8002534 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002364:	4b75      	ldr	r3, [pc, #468]	; (800253c <HAL_RCC_ClockConfig+0x1ec>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d910      	bls.n	8002394 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002372:	4b72      	ldr	r3, [pc, #456]	; (800253c <HAL_RCC_ClockConfig+0x1ec>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 0207 	bic.w	r2, r3, #7
 800237a:	4970      	ldr	r1, [pc, #448]	; (800253c <HAL_RCC_ClockConfig+0x1ec>)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b6e      	ldr	r3, [pc, #440]	; (800253c <HAL_RCC_ClockConfig+0x1ec>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0cf      	b.n	8002534 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d010      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	4b66      	ldr	r3, [pc, #408]	; (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d908      	bls.n	80023c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b0:	4b63      	ldr	r3, [pc, #396]	; (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4960      	ldr	r1, [pc, #384]	; (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d04c      	beq.n	8002468 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d6:	4b5a      	ldr	r3, [pc, #360]	; (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d121      	bne.n	8002426 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e0a6      	b.n	8002534 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ee:	4b54      	ldr	r3, [pc, #336]	; (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d115      	bne.n	8002426 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e09a      	b.n	8002534 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002406:	4b4e      	ldr	r3, [pc, #312]	; (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e08e      	b.n	8002534 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002416:	4b4a      	ldr	r3, [pc, #296]	; (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e086      	b.n	8002534 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002426:	4b46      	ldr	r3, [pc, #280]	; (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f023 0203 	bic.w	r2, r3, #3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4943      	ldr	r1, [pc, #268]	; (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 8002434:	4313      	orrs	r3, r2
 8002436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002438:	f7ff f86a 	bl	8001510 <HAL_GetTick>
 800243c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	e00a      	b.n	8002456 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002440:	f7ff f866 	bl	8001510 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e06e      	b.n	8002534 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	4b3a      	ldr	r3, [pc, #232]	; (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 020c 	and.w	r2, r3, #12
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	429a      	cmp	r2, r3
 8002466:	d1eb      	bne.n	8002440 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d010      	beq.n	8002496 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	4b31      	ldr	r3, [pc, #196]	; (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002480:	429a      	cmp	r2, r3
 8002482:	d208      	bcs.n	8002496 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002484:	4b2e      	ldr	r3, [pc, #184]	; (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	492b      	ldr	r1, [pc, #172]	; (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 8002492:	4313      	orrs	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002496:	4b29      	ldr	r3, [pc, #164]	; (800253c <HAL_RCC_ClockConfig+0x1ec>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d210      	bcs.n	80024c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a4:	4b25      	ldr	r3, [pc, #148]	; (800253c <HAL_RCC_ClockConfig+0x1ec>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 0207 	bic.w	r2, r3, #7
 80024ac:	4923      	ldr	r1, [pc, #140]	; (800253c <HAL_RCC_ClockConfig+0x1ec>)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b4:	4b21      	ldr	r3, [pc, #132]	; (800253c <HAL_RCC_ClockConfig+0x1ec>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d001      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e036      	b.n	8002534 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d008      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d2:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	4918      	ldr	r1, [pc, #96]	; (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d009      	beq.n	8002504 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024f0:	4b13      	ldr	r3, [pc, #76]	; (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4910      	ldr	r1, [pc, #64]	; (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 8002500:	4313      	orrs	r3, r2
 8002502:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002504:	f000 f824 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 8002508:	4602      	mov	r2, r0
 800250a:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	091b      	lsrs	r3, r3, #4
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	490b      	ldr	r1, [pc, #44]	; (8002544 <HAL_RCC_ClockConfig+0x1f4>)
 8002516:	5ccb      	ldrb	r3, [r1, r3]
 8002518:	f003 031f 	and.w	r3, r3, #31
 800251c:	fa22 f303 	lsr.w	r3, r2, r3
 8002520:	4a09      	ldr	r2, [pc, #36]	; (8002548 <HAL_RCC_ClockConfig+0x1f8>)
 8002522:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_RCC_ClockConfig+0x1fc>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe ffa1 	bl	8001470 <HAL_InitTick>
 800252e:	4603      	mov	r3, r0
 8002530:	72fb      	strb	r3, [r7, #11]

  return status;
 8002532:	7afb      	ldrb	r3, [r7, #11]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40022000 	.word	0x40022000
 8002540:	40021000 	.word	0x40021000
 8002544:	08004f5c 	.word	0x08004f5c
 8002548:	20000004 	.word	0x20000004
 800254c:	20000008 	.word	0x20000008

08002550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002550:	b480      	push	{r7}
 8002552:	b089      	sub	sp, #36	; 0x24
 8002554:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	2300      	movs	r3, #0
 800255c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800255e:	4b3e      	ldr	r3, [pc, #248]	; (8002658 <HAL_RCC_GetSysClockFreq+0x108>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002568:	4b3b      	ldr	r3, [pc, #236]	; (8002658 <HAL_RCC_GetSysClockFreq+0x108>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0x34>
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	2b0c      	cmp	r3, #12
 800257c:	d121      	bne.n	80025c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d11e      	bne.n	80025c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002584:	4b34      	ldr	r3, [pc, #208]	; (8002658 <HAL_RCC_GetSysClockFreq+0x108>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d107      	bne.n	80025a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002590:	4b31      	ldr	r3, [pc, #196]	; (8002658 <HAL_RCC_GetSysClockFreq+0x108>)
 8002592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002596:	0a1b      	lsrs	r3, r3, #8
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	e005      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025a0:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025ac:	4a2b      	ldr	r2, [pc, #172]	; (800265c <HAL_RCC_GetSysClockFreq+0x10c>)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10d      	bne.n	80025d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025c0:	e00a      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d102      	bne.n	80025ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025c8:	4b25      	ldr	r3, [pc, #148]	; (8002660 <HAL_RCC_GetSysClockFreq+0x110>)
 80025ca:	61bb      	str	r3, [r7, #24]
 80025cc:	e004      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025d4:	4b23      	ldr	r3, [pc, #140]	; (8002664 <HAL_RCC_GetSysClockFreq+0x114>)
 80025d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	2b0c      	cmp	r3, #12
 80025dc:	d134      	bne.n	8002648 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025de:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d003      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0xac>
 80025f4:	e005      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025f6:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <HAL_RCC_GetSysClockFreq+0x110>)
 80025f8:	617b      	str	r3, [r7, #20]
      break;
 80025fa:	e005      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025fc:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_RCC_GetSysClockFreq+0x114>)
 80025fe:	617b      	str	r3, [r7, #20]
      break;
 8002600:	e002      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	617b      	str	r3, [r7, #20]
      break;
 8002606:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002608:	4b13      	ldr	r3, [pc, #76]	; (8002658 <HAL_RCC_GetSysClockFreq+0x108>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	3301      	adds	r3, #1
 8002614:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <HAL_RCC_GetSysClockFreq+0x108>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	fb03 f202 	mul.w	r2, r3, r2
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	fbb2 f3f3 	udiv	r3, r2, r3
 800262c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800262e:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <HAL_RCC_GetSysClockFreq+0x108>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	0e5b      	lsrs	r3, r3, #25
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	3301      	adds	r3, #1
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	fbb2 f3f3 	udiv	r3, r2, r3
 8002646:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002648:	69bb      	ldr	r3, [r7, #24]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3724      	adds	r7, #36	; 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
 800265c:	08004f74 	.word	0x08004f74
 8002660:	00f42400 	.word	0x00f42400
 8002664:	007a1200 	.word	0x007a1200

08002668 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <HAL_RCC_GetHCLKFreq+0x14>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000004 	.word	0x20000004

08002680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002684:	f7ff fff0 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 8002688:	4602      	mov	r2, r0
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	0a1b      	lsrs	r3, r3, #8
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	4904      	ldr	r1, [pc, #16]	; (80026a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002696:	5ccb      	ldrb	r3, [r1, r3]
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021000 	.word	0x40021000
 80026a8:	08004f6c 	.word	0x08004f6c

080026ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026b0:	f7ff ffda 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 80026b4:	4602      	mov	r2, r0
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	0adb      	lsrs	r3, r3, #11
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	4904      	ldr	r1, [pc, #16]	; (80026d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40021000 	.word	0x40021000
 80026d4:	08004f6c 	.word	0x08004f6c

080026d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026e0:	2300      	movs	r3, #0
 80026e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026e4:	4b2a      	ldr	r3, [pc, #168]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026f0:	f7ff f9b6 	bl	8001a60 <HAL_PWREx_GetVoltageRange>
 80026f4:	6178      	str	r0, [r7, #20]
 80026f6:	e014      	b.n	8002722 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026f8:	4b25      	ldr	r3, [pc, #148]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fc:	4a24      	ldr	r2, [pc, #144]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002702:	6593      	str	r3, [r2, #88]	; 0x58
 8002704:	4b22      	ldr	r3, [pc, #136]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002710:	f7ff f9a6 	bl	8001a60 <HAL_PWREx_GetVoltageRange>
 8002714:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	4a1d      	ldr	r2, [pc, #116]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800271c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002720:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002728:	d10b      	bne.n	8002742 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b80      	cmp	r3, #128	; 0x80
 800272e:	d919      	bls.n	8002764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2ba0      	cmp	r3, #160	; 0xa0
 8002734:	d902      	bls.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002736:	2302      	movs	r3, #2
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	e013      	b.n	8002764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800273c:	2301      	movs	r3, #1
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	e010      	b.n	8002764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b80      	cmp	r3, #128	; 0x80
 8002746:	d902      	bls.n	800274e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002748:	2303      	movs	r3, #3
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	e00a      	b.n	8002764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b80      	cmp	r3, #128	; 0x80
 8002752:	d102      	bne.n	800275a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002754:	2302      	movs	r3, #2
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	e004      	b.n	8002764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b70      	cmp	r3, #112	; 0x70
 800275e:	d101      	bne.n	8002764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002760:	2301      	movs	r3, #1
 8002762:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f023 0207 	bic.w	r2, r3, #7
 800276c:	4909      	ldr	r1, [pc, #36]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002774:	4b07      	ldr	r3, [pc, #28]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	429a      	cmp	r2, r3
 8002780:	d001      	beq.n	8002786 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	40022000 	.word	0x40022000

08002798 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027a0:	2300      	movs	r3, #0
 80027a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027a4:	2300      	movs	r3, #0
 80027a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d031      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027bc:	d01a      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80027be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027c2:	d814      	bhi.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d009      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027cc:	d10f      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80027ce:	4b5d      	ldr	r3, [pc, #372]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	4a5c      	ldr	r2, [pc, #368]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027da:	e00c      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3304      	adds	r3, #4
 80027e0:	2100      	movs	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f9de 	bl	8002ba4 <RCCEx_PLLSAI1_Config>
 80027e8:	4603      	mov	r3, r0
 80027ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027ec:	e003      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	74fb      	strb	r3, [r7, #19]
      break;
 80027f2:	e000      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80027f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027f6:	7cfb      	ldrb	r3, [r7, #19]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10b      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027fc:	4b51      	ldr	r3, [pc, #324]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002802:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280a:	494e      	ldr	r1, [pc, #312]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002812:	e001      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002814:	7cfb      	ldrb	r3, [r7, #19]
 8002816:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 809e 	beq.w	8002962 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002826:	2300      	movs	r3, #0
 8002828:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800282a:	4b46      	ldr	r3, [pc, #280]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800282c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800283a:	2300      	movs	r3, #0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00d      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002840:	4b40      	ldr	r3, [pc, #256]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002844:	4a3f      	ldr	r2, [pc, #252]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284a:	6593      	str	r3, [r2, #88]	; 0x58
 800284c:	4b3d      	ldr	r3, [pc, #244]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800284e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002858:	2301      	movs	r3, #1
 800285a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800285c:	4b3a      	ldr	r3, [pc, #232]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a39      	ldr	r2, [pc, #228]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002866:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002868:	f7fe fe52 	bl	8001510 <HAL_GetTick>
 800286c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800286e:	e009      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002870:	f7fe fe4e 	bl	8001510 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d902      	bls.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	74fb      	strb	r3, [r7, #19]
        break;
 8002882:	e005      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002884:	4b30      	ldr	r3, [pc, #192]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0ef      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002890:	7cfb      	ldrb	r3, [r7, #19]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d15a      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002896:	4b2b      	ldr	r3, [pc, #172]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01e      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d019      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028b2:	4b24      	ldr	r3, [pc, #144]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028be:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c4:	4a1f      	ldr	r2, [pc, #124]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028ce:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d4:	4a1b      	ldr	r2, [pc, #108]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028de:	4a19      	ldr	r2, [pc, #100]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d016      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe fe0e 	bl	8001510 <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f6:	e00b      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f8:	f7fe fe0a 	bl	8001510 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d902      	bls.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	74fb      	strb	r3, [r7, #19]
            break;
 800290e:	e006      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0ec      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800291e:	7cfb      	ldrb	r3, [r7, #19]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10b      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002924:	4b07      	ldr	r3, [pc, #28]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002932:	4904      	ldr	r1, [pc, #16]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800293a:	e009      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800293c:	7cfb      	ldrb	r3, [r7, #19]
 800293e:	74bb      	strb	r3, [r7, #18]
 8002940:	e006      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000
 8002948:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002950:	7c7b      	ldrb	r3, [r7, #17]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d105      	bne.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002956:	4b8a      	ldr	r3, [pc, #552]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	4a89      	ldr	r2, [pc, #548]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800295c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002960:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800296e:	4b84      	ldr	r3, [pc, #528]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002974:	f023 0203 	bic.w	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	4980      	ldr	r1, [pc, #512]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002990:	4b7b      	ldr	r3, [pc, #492]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002996:	f023 020c 	bic.w	r2, r3, #12
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	4978      	ldr	r1, [pc, #480]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029b2:	4b73      	ldr	r3, [pc, #460]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	496f      	ldr	r1, [pc, #444]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029d4:	4b6a      	ldr	r3, [pc, #424]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e2:	4967      	ldr	r1, [pc, #412]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029f6:	4b62      	ldr	r3, [pc, #392]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a04:	495e      	ldr	r1, [pc, #376]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a18:	4b59      	ldr	r3, [pc, #356]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	4956      	ldr	r1, [pc, #344]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a3a:	4b51      	ldr	r3, [pc, #324]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	494d      	ldr	r1, [pc, #308]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d028      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a5c:	4b48      	ldr	r3, [pc, #288]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	4945      	ldr	r1, [pc, #276]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a7c:	4b40      	ldr	r3, [pc, #256]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4a3f      	ldr	r2, [pc, #252]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a86:	60d3      	str	r3, [r2, #12]
 8002a88:	e011      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a92:	d10c      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	2101      	movs	r1, #1
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f882 	bl	8002ba4 <RCCEx_PLLSAI1_Config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002aaa:	7cfb      	ldrb	r3, [r7, #19]
 8002aac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d028      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002aba:	4b31      	ldr	r3, [pc, #196]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac8:	492d      	ldr	r1, [pc, #180]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ad8:	d106      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ada:	4b29      	ldr	r3, [pc, #164]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	4a28      	ldr	r2, [pc, #160]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ae4:	60d3      	str	r3, [r2, #12]
 8002ae6:	e011      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3304      	adds	r3, #4
 8002af6:	2101      	movs	r1, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 f853 	bl	8002ba4 <RCCEx_PLLSAI1_Config>
 8002afe:	4603      	mov	r3, r0
 8002b00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b02:	7cfb      	ldrb	r3, [r7, #19]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002b08:	7cfb      	ldrb	r3, [r7, #19]
 8002b0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d01c      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b18:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b26:	4916      	ldr	r1, [pc, #88]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b36:	d10c      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	2102      	movs	r1, #2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 f830 	bl	8002ba4 <RCCEx_PLLSAI1_Config>
 8002b44:	4603      	mov	r3, r0
 8002b46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b48:	7cfb      	ldrb	r3, [r7, #19]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002b4e:	7cfb      	ldrb	r3, [r7, #19]
 8002b50:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b64:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6c:	4904      	ldr	r1, [pc, #16]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b74:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000

08002b84 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b8e:	f043 0304 	orr.w	r3, r3, #4
 8002b92:	6013      	str	r3, [r2, #0]
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000

08002ba4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bb2:	4b74      	ldr	r3, [pc, #464]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d018      	beq.n	8002bf0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bbe:	4b71      	ldr	r3, [pc, #452]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f003 0203 	and.w	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d10d      	bne.n	8002bea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
       ||
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bd6:	4b6b      	ldr	r3, [pc, #428]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
       ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d047      	beq.n	8002c7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
 8002bee:	e044      	b.n	8002c7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d018      	beq.n	8002c2a <RCCEx_PLLSAI1_Config+0x86>
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d825      	bhi.n	8002c48 <RCCEx_PLLSAI1_Config+0xa4>
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d002      	beq.n	8002c06 <RCCEx_PLLSAI1_Config+0x62>
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d009      	beq.n	8002c18 <RCCEx_PLLSAI1_Config+0x74>
 8002c04:	e020      	b.n	8002c48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c06:	4b5f      	ldr	r3, [pc, #380]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d11d      	bne.n	8002c4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c16:	e01a      	b.n	8002c4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c18:	4b5a      	ldr	r3, [pc, #360]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d116      	bne.n	8002c52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c28:	e013      	b.n	8002c52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c2a:	4b56      	ldr	r3, [pc, #344]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10f      	bne.n	8002c56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c36:	4b53      	ldr	r3, [pc, #332]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c46:	e006      	b.n	8002c56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c4c:	e004      	b.n	8002c58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c4e:	bf00      	nop
 8002c50:	e002      	b.n	8002c58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c52:	bf00      	nop
 8002c54:	e000      	b.n	8002c58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c56:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10d      	bne.n	8002c7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c5e:	4b49      	ldr	r3, [pc, #292]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6819      	ldr	r1, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	430b      	orrs	r3, r1
 8002c74:	4943      	ldr	r1, [pc, #268]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d17c      	bne.n	8002d7a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c80:	4b40      	ldr	r3, [pc, #256]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a3f      	ldr	r2, [pc, #252]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c8c:	f7fe fc40 	bl	8001510 <HAL_GetTick>
 8002c90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c92:	e009      	b.n	8002ca8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c94:	f7fe fc3c 	bl	8001510 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d902      	bls.n	8002ca8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ca6:	e005      	b.n	8002cb4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ca8:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1ef      	bne.n	8002c94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d15f      	bne.n	8002d7a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d110      	bne.n	8002ce2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cc0:	4b30      	ldr	r3, [pc, #192]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002cc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6892      	ldr	r2, [r2, #8]
 8002cd0:	0211      	lsls	r1, r2, #8
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68d2      	ldr	r2, [r2, #12]
 8002cd6:	06d2      	lsls	r2, r2, #27
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	492a      	ldr	r1, [pc, #168]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	610b      	str	r3, [r1, #16]
 8002ce0:	e027      	b.n	8002d32 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d112      	bne.n	8002d0e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ce8:	4b26      	ldr	r3, [pc, #152]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002cf0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6892      	ldr	r2, [r2, #8]
 8002cf8:	0211      	lsls	r1, r2, #8
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6912      	ldr	r2, [r2, #16]
 8002cfe:	0852      	lsrs	r2, r2, #1
 8002d00:	3a01      	subs	r2, #1
 8002d02:	0552      	lsls	r2, r2, #21
 8002d04:	430a      	orrs	r2, r1
 8002d06:	491f      	ldr	r1, [pc, #124]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	610b      	str	r3, [r1, #16]
 8002d0c:	e011      	b.n	8002d32 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6892      	ldr	r2, [r2, #8]
 8002d1e:	0211      	lsls	r1, r2, #8
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6952      	ldr	r2, [r2, #20]
 8002d24:	0852      	lsrs	r2, r2, #1
 8002d26:	3a01      	subs	r2, #1
 8002d28:	0652      	lsls	r2, r2, #25
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	4915      	ldr	r1, [pc, #84]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d32:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3e:	f7fe fbe7 	bl	8001510 <HAL_GetTick>
 8002d42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d44:	e009      	b.n	8002d5a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d46:	f7fe fbe3 	bl	8001510 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d902      	bls.n	8002d5a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	73fb      	strb	r3, [r7, #15]
          break;
 8002d58:	e005      	b.n	8002d66 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0ef      	beq.n	8002d46 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d106      	bne.n	8002d7a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	4903      	ldr	r1, [pc, #12]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000

08002d88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e095      	b.n	8002ec6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d108      	bne.n	8002db4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002daa:	d009      	beq.n	8002dc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	61da      	str	r2, [r3, #28]
 8002db2:	e005      	b.n	8002dc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe f9f8 	bl	80011d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e00:	d902      	bls.n	8002e08 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	e002      	b.n	8002e0e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e0c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002e16:	d007      	beq.n	8002e28 <HAL_SPI_Init+0xa0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e20:	d002      	beq.n	8002e28 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6a:	ea42 0103 	orr.w	r1, r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	0c1b      	lsrs	r3, r3, #16
 8002e84:	f003 0204 	and.w	r2, r3, #4
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002ea4:	ea42 0103 	orr.w	r1, r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b088      	sub	sp, #32
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	603b      	str	r3, [r7, #0]
 8002eda:	4613      	mov	r3, r2
 8002edc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_SPI_Transmit+0x22>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e15f      	b.n	80031b0 <HAL_SPI_Transmit+0x2e2>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ef8:	f7fe fb0a 	bl	8001510 <HAL_GetTick>
 8002efc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002efe:	88fb      	ldrh	r3, [r7, #6]
 8002f00:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d002      	beq.n	8002f14 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f12:	e148      	b.n	80031a6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <HAL_SPI_Transmit+0x52>
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f24:	e13f      	b.n	80031a6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2203      	movs	r2, #3
 8002f2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	88fa      	ldrh	r2, [r7, #6]
 8002f3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	88fa      	ldrh	r2, [r7, #6]
 8002f44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f70:	d10f      	bne.n	8002f92 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9c:	2b40      	cmp	r3, #64	; 0x40
 8002f9e:	d007      	beq.n	8002fb0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fb8:	d94f      	bls.n	800305a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_SPI_Transmit+0xfa>
 8002fc2:	8afb      	ldrh	r3, [r7, #22]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d142      	bne.n	800304e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	881a      	ldrh	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	1c9a      	adds	r2, r3, #2
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fec:	e02f      	b.n	800304e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d112      	bne.n	8003022 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	881a      	ldrh	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300c:	1c9a      	adds	r2, r3, #2
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003020:	e015      	b.n	800304e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003022:	f7fe fa75 	bl	8001510 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d803      	bhi.n	800303a <HAL_SPI_Transmit+0x16c>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003038:	d102      	bne.n	8003040 <HAL_SPI_Transmit+0x172>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d106      	bne.n	800304e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800304c:	e0ab      	b.n	80031a6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1ca      	bne.n	8002fee <HAL_SPI_Transmit+0x120>
 8003058:	e080      	b.n	800315c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <HAL_SPI_Transmit+0x19a>
 8003062:	8afb      	ldrh	r3, [r7, #22]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d174      	bne.n	8003152 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d912      	bls.n	8003098 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003076:	881a      	ldrh	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	1c9a      	adds	r2, r3, #2
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b02      	subs	r3, #2
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003096:	e05c      	b.n	8003152 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	330c      	adds	r3, #12
 80030a2:	7812      	ldrb	r2, [r2, #0]
 80030a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80030be:	e048      	b.n	8003152 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d12b      	bne.n	8003126 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d912      	bls.n	80030fe <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	881a      	ldrh	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	1c9a      	adds	r2, r3, #2
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b02      	subs	r3, #2
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030fc:	e029      	b.n	8003152 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	330c      	adds	r3, #12
 8003108:	7812      	ldrb	r2, [r2, #0]
 800310a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003124:	e015      	b.n	8003152 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003126:	f7fe f9f3 	bl	8001510 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d803      	bhi.n	800313e <HAL_SPI_Transmit+0x270>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800313c:	d102      	bne.n	8003144 <HAL_SPI_Transmit+0x276>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d106      	bne.n	8003152 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003150:	e029      	b.n	80031a6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1b1      	bne.n	80030c0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	6839      	ldr	r1, [r7, #0]
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 fb69 	bl	8003838 <SPI_EndRxTxTransaction>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10a      	bne.n	8003190 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800317a:	2300      	movs	r3, #0
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	77fb      	strb	r3, [r7, #31]
 800319c:	e003      	b.n	80031a6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80031ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3720      	adds	r7, #32
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	; 0x28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031c6:	2301      	movs	r3, #1
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_SPI_TransmitReceive+0x26>
 80031da:	2302      	movs	r3, #2
 80031dc:	e20a      	b.n	80035f4 <HAL_SPI_TransmitReceive+0x43c>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031e6:	f7fe f993 	bl	8001510 <HAL_GetTick>
 80031ea:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031f2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80031fa:	887b      	ldrh	r3, [r7, #2]
 80031fc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80031fe:	887b      	ldrh	r3, [r7, #2]
 8003200:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003202:	7efb      	ldrb	r3, [r7, #27]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d00e      	beq.n	8003226 <HAL_SPI_TransmitReceive+0x6e>
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800320e:	d106      	bne.n	800321e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d102      	bne.n	800321e <HAL_SPI_TransmitReceive+0x66>
 8003218:	7efb      	ldrb	r3, [r7, #27]
 800321a:	2b04      	cmp	r3, #4
 800321c:	d003      	beq.n	8003226 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800321e:	2302      	movs	r3, #2
 8003220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003224:	e1e0      	b.n	80035e8 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_SPI_TransmitReceive+0x80>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <HAL_SPI_TransmitReceive+0x80>
 8003232:	887b      	ldrh	r3, [r7, #2]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d103      	bne.n	8003240 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800323e:	e1d3      	b.n	80035e8 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b04      	cmp	r3, #4
 800324a:	d003      	beq.n	8003254 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2205      	movs	r2, #5
 8003250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	887a      	ldrh	r2, [r7, #2]
 8003264:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	887a      	ldrh	r2, [r7, #2]
 800326c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	887a      	ldrh	r2, [r7, #2]
 800327a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	887a      	ldrh	r2, [r7, #2]
 8003280:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003296:	d802      	bhi.n	800329e <HAL_SPI_TransmitReceive+0xe6>
 8003298:	8a3b      	ldrh	r3, [r7, #16]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d908      	bls.n	80032b0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	e007      	b.n	80032c0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032be:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ca:	2b40      	cmp	r3, #64	; 0x40
 80032cc:	d007      	beq.n	80032de <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032e6:	f240 8081 	bls.w	80033ec <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_SPI_TransmitReceive+0x140>
 80032f2:	8a7b      	ldrh	r3, [r7, #18]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d16d      	bne.n	80033d4 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	881a      	ldrh	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	1c9a      	adds	r2, r3, #2
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800331c:	e05a      	b.n	80033d4 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b02      	cmp	r3, #2
 800332a:	d11b      	bne.n	8003364 <HAL_SPI_TransmitReceive+0x1ac>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <HAL_SPI_TransmitReceive+0x1ac>
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	2b01      	cmp	r3, #1
 800333a:	d113      	bne.n	8003364 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003340:	881a      	ldrh	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334c:	1c9a      	adds	r2, r3, #2
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b01      	cmp	r3, #1
 8003370:	d11c      	bne.n	80033ac <HAL_SPI_TransmitReceive+0x1f4>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d016      	beq.n	80033ac <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	b292      	uxth	r2, r2
 800338a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	1c9a      	adds	r2, r3, #2
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033a8:	2301      	movs	r3, #1
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033ac:	f7fe f8b0 	bl	8001510 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d80b      	bhi.n	80033d4 <HAL_SPI_TransmitReceive+0x21c>
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033c2:	d007      	beq.n	80033d4 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80033d2:	e109      	b.n	80035e8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d19f      	bne.n	800331e <HAL_SPI_TransmitReceive+0x166>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d199      	bne.n	800331e <HAL_SPI_TransmitReceive+0x166>
 80033ea:	e0e3      	b.n	80035b4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_SPI_TransmitReceive+0x244>
 80033f4:	8a7b      	ldrh	r3, [r7, #18]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	f040 80cf 	bne.w	800359a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d912      	bls.n	800342c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	881a      	ldrh	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	1c9a      	adds	r2, r3, #2
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003420:	b29b      	uxth	r3, r3
 8003422:	3b02      	subs	r3, #2
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	87da      	strh	r2, [r3, #62]	; 0x3e
 800342a:	e0b6      	b.n	800359a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	330c      	adds	r3, #12
 8003436:	7812      	ldrb	r2, [r2, #0]
 8003438:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003448:	b29b      	uxth	r3, r3
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003452:	e0a2      	b.n	800359a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b02      	cmp	r3, #2
 8003460:	d134      	bne.n	80034cc <HAL_SPI_TransmitReceive+0x314>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d02f      	beq.n	80034cc <HAL_SPI_TransmitReceive+0x314>
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	2b01      	cmp	r3, #1
 8003470:	d12c      	bne.n	80034cc <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	d912      	bls.n	80034a2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003480:	881a      	ldrh	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348c:	1c9a      	adds	r2, r3, #2
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b02      	subs	r3, #2
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034a0:	e012      	b.n	80034c8 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	330c      	adds	r3, #12
 80034ac:	7812      	ldrb	r2, [r2, #0]
 80034ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d148      	bne.n	800356c <HAL_SPI_TransmitReceive+0x3b4>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d042      	beq.n	800356c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d923      	bls.n	800353a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	b292      	uxth	r2, r2
 80034fe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	1c9a      	adds	r2, r3, #2
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b02      	subs	r3, #2
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b01      	cmp	r3, #1
 8003526:	d81f      	bhi.n	8003568 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003536:	605a      	str	r2, [r3, #4]
 8003538:	e016      	b.n	8003568 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f103 020c 	add.w	r2, r3, #12
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	7812      	ldrb	r2, [r2, #0]
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800355c:	b29b      	uxth	r3, r3
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003568:	2301      	movs	r3, #1
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800356c:	f7fd ffd0 	bl	8001510 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003578:	429a      	cmp	r2, r3
 800357a:	d803      	bhi.n	8003584 <HAL_SPI_TransmitReceive+0x3cc>
 800357c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003582:	d102      	bne.n	800358a <HAL_SPI_TransmitReceive+0x3d2>
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	2b00      	cmp	r3, #0
 8003588:	d107      	bne.n	800359a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003598:	e026      	b.n	80035e8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f47f af57 	bne.w	8003454 <HAL_SPI_TransmitReceive+0x29c>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f47f af50 	bne.w	8003454 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 f93d 	bl	8003838 <SPI_EndRxTxTransaction>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2220      	movs	r2, #32
 80035ce:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035de:	e003      	b.n	80035e8 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80035f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3728      	adds	r7, #40	; 0x28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	4613      	mov	r3, r2
 800360a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800360c:	f7fd ff80 	bl	8001510 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	4413      	add	r3, r2
 800361a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800361c:	f7fd ff78 	bl	8001510 <HAL_GetTick>
 8003620:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003622:	4b39      	ldr	r3, [pc, #228]	; (8003708 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	015b      	lsls	r3, r3, #5
 8003628:	0d1b      	lsrs	r3, r3, #20
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	fb02 f303 	mul.w	r3, r2, r3
 8003630:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003632:	e054      	b.n	80036de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800363a:	d050      	beq.n	80036de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800363c:	f7fd ff68 	bl	8001510 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	429a      	cmp	r2, r3
 800364a:	d902      	bls.n	8003652 <SPI_WaitFlagStateUntilTimeout+0x56>
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d13d      	bne.n	80036ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003660:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800366a:	d111      	bne.n	8003690 <SPI_WaitFlagStateUntilTimeout+0x94>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003674:	d004      	beq.n	8003680 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367e:	d107      	bne.n	8003690 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800368e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003698:	d10f      	bne.n	80036ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e017      	b.n	80036fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	3b01      	subs	r3, #1
 80036dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4013      	ands	r3, r2
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	bf0c      	ite	eq
 80036ee:	2301      	moveq	r3, #1
 80036f0:	2300      	movne	r3, #0
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	461a      	mov	r2, r3
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d19b      	bne.n	8003634 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3720      	adds	r7, #32
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000004 	.word	0x20000004

0800370c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08a      	sub	sp, #40	; 0x28
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800371a:	2300      	movs	r3, #0
 800371c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800371e:	f7fd fef7 	bl	8001510 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	4413      	add	r3, r2
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800372e:	f7fd feef 	bl	8001510 <HAL_GetTick>
 8003732:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	330c      	adds	r3, #12
 800373a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800373c:	4b3d      	ldr	r3, [pc, #244]	; (8003834 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	00da      	lsls	r2, r3, #3
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	0d1b      	lsrs	r3, r3, #20
 800374c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003754:	e060      	b.n	8003818 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800375c:	d107      	bne.n	800376e <SPI_WaitFifoStateUntilTimeout+0x62>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d104      	bne.n	800376e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800376c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003774:	d050      	beq.n	8003818 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003776:	f7fd fecb 	bl	8001510 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003782:	429a      	cmp	r2, r3
 8003784:	d902      	bls.n	800378c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	2b00      	cmp	r3, #0
 800378a:	d13d      	bne.n	8003808 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800379a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037a4:	d111      	bne.n	80037ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ae:	d004      	beq.n	80037ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b8:	d107      	bne.n	80037ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d2:	d10f      	bne.n	80037f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e010      	b.n	800382a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	3b01      	subs	r3, #1
 8003816:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	4013      	ands	r3, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	429a      	cmp	r2, r3
 8003826:	d196      	bne.n	8003756 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3728      	adds	r7, #40	; 0x28
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000004 	.word	0x20000004

08003838 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af02      	add	r7, sp, #8
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2200      	movs	r2, #0
 800384c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f7ff ff5b 	bl	800370c <SPI_WaitFifoStateUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003860:	f043 0220 	orr.w	r2, r3, #32
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e027      	b.n	80038bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2200      	movs	r2, #0
 8003874:	2180      	movs	r1, #128	; 0x80
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f7ff fec0 	bl	80035fc <SPI_WaitFlagStateUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d007      	beq.n	8003892 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003886:	f043 0220 	orr.w	r2, r3, #32
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e014      	b.n	80038bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2200      	movs	r2, #0
 800389a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f7ff ff34 	bl	800370c <SPI_WaitFifoStateUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ae:	f043 0220 	orr.w	r2, r3, #32
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e000      	b.n	80038bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e040      	b.n	8003958 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd fcb4 	bl	8001254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2224      	movs	r2, #36	; 0x24
 80038f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0201 	bic.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fade 	bl	8003ecc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f8af 	bl	8003a74 <UART_SetConfig>
 8003916:	4603      	mov	r3, r0
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e01b      	b.n	8003958 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800392e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800393e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 fb5d 	bl	8004010 <UART_CheckIdleState>
 8003956:	4603      	mov	r3, r0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08a      	sub	sp, #40	; 0x28
 8003964:	af02      	add	r7, sp, #8
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	4613      	mov	r3, r2
 800396e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003974:	2b20      	cmp	r3, #32
 8003976:	d178      	bne.n	8003a6a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <HAL_UART_Transmit+0x24>
 800397e:	88fb      	ldrh	r3, [r7, #6]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e071      	b.n	8003a6c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2221      	movs	r2, #33	; 0x21
 8003994:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003996:	f7fd fdbb 	bl	8001510 <HAL_GetTick>
 800399a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	88fa      	ldrh	r2, [r7, #6]
 80039a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	88fa      	ldrh	r2, [r7, #6]
 80039a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b4:	d108      	bne.n	80039c8 <HAL_UART_Transmit+0x68>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d104      	bne.n	80039c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	e003      	b.n	80039d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039cc:	2300      	movs	r3, #0
 80039ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039d0:	e030      	b.n	8003a34 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2200      	movs	r2, #0
 80039da:	2180      	movs	r1, #128	; 0x80
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fbbf 	bl	8004160 <UART_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d004      	beq.n	80039f2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e03c      	b.n	8003a6c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10b      	bne.n	8003a10 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	881a      	ldrh	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a04:	b292      	uxth	r2, r2
 8003a06:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	3302      	adds	r3, #2
 8003a0c:	61bb      	str	r3, [r7, #24]
 8003a0e:	e008      	b.n	8003a22 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	781a      	ldrb	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	b292      	uxth	r2, r2
 8003a1a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1c8      	bne.n	80039d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2200      	movs	r2, #0
 8003a48:	2140      	movs	r1, #64	; 0x40
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 fb88 	bl	8004160 <UART_WaitOnFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d004      	beq.n	8003a60 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e005      	b.n	8003a6c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	e000      	b.n	8003a6c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003a6a:	2302      	movs	r3, #2
  }
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3720      	adds	r7, #32
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a78:	b08a      	sub	sp, #40	; 0x28
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4bb4      	ldr	r3, [pc, #720]	; (8003d74 <UART_SetConfig+0x300>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	6812      	ldr	r2, [r2, #0]
 8003aaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aac:	430b      	orrs	r3, r1
 8003aae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4aa9      	ldr	r2, [pc, #676]	; (8003d78 <UART_SetConfig+0x304>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d004      	beq.n	8003ae0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003adc:	4313      	orrs	r3, r2
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af0:	430a      	orrs	r2, r1
 8003af2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4aa0      	ldr	r2, [pc, #640]	; (8003d7c <UART_SetConfig+0x308>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d126      	bne.n	8003b4c <UART_SetConfig+0xd8>
 8003afe:	4ba0      	ldr	r3, [pc, #640]	; (8003d80 <UART_SetConfig+0x30c>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d81b      	bhi.n	8003b44 <UART_SetConfig+0xd0>
 8003b0c:	a201      	add	r2, pc, #4	; (adr r2, 8003b14 <UART_SetConfig+0xa0>)
 8003b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b12:	bf00      	nop
 8003b14:	08003b25 	.word	0x08003b25
 8003b18:	08003b35 	.word	0x08003b35
 8003b1c:	08003b2d 	.word	0x08003b2d
 8003b20:	08003b3d 	.word	0x08003b3d
 8003b24:	2301      	movs	r3, #1
 8003b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b2a:	e080      	b.n	8003c2e <UART_SetConfig+0x1ba>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b32:	e07c      	b.n	8003c2e <UART_SetConfig+0x1ba>
 8003b34:	2304      	movs	r3, #4
 8003b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b3a:	e078      	b.n	8003c2e <UART_SetConfig+0x1ba>
 8003b3c:	2308      	movs	r3, #8
 8003b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b42:	e074      	b.n	8003c2e <UART_SetConfig+0x1ba>
 8003b44:	2310      	movs	r3, #16
 8003b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4a:	e070      	b.n	8003c2e <UART_SetConfig+0x1ba>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a8c      	ldr	r2, [pc, #560]	; (8003d84 <UART_SetConfig+0x310>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d138      	bne.n	8003bc8 <UART_SetConfig+0x154>
 8003b56:	4b8a      	ldr	r3, [pc, #552]	; (8003d80 <UART_SetConfig+0x30c>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5c:	f003 030c 	and.w	r3, r3, #12
 8003b60:	2b0c      	cmp	r3, #12
 8003b62:	d82d      	bhi.n	8003bc0 <UART_SetConfig+0x14c>
 8003b64:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <UART_SetConfig+0xf8>)
 8003b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6a:	bf00      	nop
 8003b6c:	08003ba1 	.word	0x08003ba1
 8003b70:	08003bc1 	.word	0x08003bc1
 8003b74:	08003bc1 	.word	0x08003bc1
 8003b78:	08003bc1 	.word	0x08003bc1
 8003b7c:	08003bb1 	.word	0x08003bb1
 8003b80:	08003bc1 	.word	0x08003bc1
 8003b84:	08003bc1 	.word	0x08003bc1
 8003b88:	08003bc1 	.word	0x08003bc1
 8003b8c:	08003ba9 	.word	0x08003ba9
 8003b90:	08003bc1 	.word	0x08003bc1
 8003b94:	08003bc1 	.word	0x08003bc1
 8003b98:	08003bc1 	.word	0x08003bc1
 8003b9c:	08003bb9 	.word	0x08003bb9
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba6:	e042      	b.n	8003c2e <UART_SetConfig+0x1ba>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bae:	e03e      	b.n	8003c2e <UART_SetConfig+0x1ba>
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb6:	e03a      	b.n	8003c2e <UART_SetConfig+0x1ba>
 8003bb8:	2308      	movs	r3, #8
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bbe:	e036      	b.n	8003c2e <UART_SetConfig+0x1ba>
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc6:	e032      	b.n	8003c2e <UART_SetConfig+0x1ba>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a6a      	ldr	r2, [pc, #424]	; (8003d78 <UART_SetConfig+0x304>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d12a      	bne.n	8003c28 <UART_SetConfig+0x1b4>
 8003bd2:	4b6b      	ldr	r3, [pc, #428]	; (8003d80 <UART_SetConfig+0x30c>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003be0:	d01a      	beq.n	8003c18 <UART_SetConfig+0x1a4>
 8003be2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003be6:	d81b      	bhi.n	8003c20 <UART_SetConfig+0x1ac>
 8003be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bec:	d00c      	beq.n	8003c08 <UART_SetConfig+0x194>
 8003bee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf2:	d815      	bhi.n	8003c20 <UART_SetConfig+0x1ac>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <UART_SetConfig+0x18c>
 8003bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfc:	d008      	beq.n	8003c10 <UART_SetConfig+0x19c>
 8003bfe:	e00f      	b.n	8003c20 <UART_SetConfig+0x1ac>
 8003c00:	2300      	movs	r3, #0
 8003c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c06:	e012      	b.n	8003c2e <UART_SetConfig+0x1ba>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0e:	e00e      	b.n	8003c2e <UART_SetConfig+0x1ba>
 8003c10:	2304      	movs	r3, #4
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c16:	e00a      	b.n	8003c2e <UART_SetConfig+0x1ba>
 8003c18:	2308      	movs	r3, #8
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c1e:	e006      	b.n	8003c2e <UART_SetConfig+0x1ba>
 8003c20:	2310      	movs	r3, #16
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c26:	e002      	b.n	8003c2e <UART_SetConfig+0x1ba>
 8003c28:	2310      	movs	r3, #16
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a51      	ldr	r2, [pc, #324]	; (8003d78 <UART_SetConfig+0x304>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d17a      	bne.n	8003d2e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d824      	bhi.n	8003c8a <UART_SetConfig+0x216>
 8003c40:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <UART_SetConfig+0x1d4>)
 8003c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c46:	bf00      	nop
 8003c48:	08003c6d 	.word	0x08003c6d
 8003c4c:	08003c8b 	.word	0x08003c8b
 8003c50:	08003c75 	.word	0x08003c75
 8003c54:	08003c8b 	.word	0x08003c8b
 8003c58:	08003c7b 	.word	0x08003c7b
 8003c5c:	08003c8b 	.word	0x08003c8b
 8003c60:	08003c8b 	.word	0x08003c8b
 8003c64:	08003c8b 	.word	0x08003c8b
 8003c68:	08003c83 	.word	0x08003c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c6c:	f7fe fd08 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8003c70:	61f8      	str	r0, [r7, #28]
        break;
 8003c72:	e010      	b.n	8003c96 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c74:	4b44      	ldr	r3, [pc, #272]	; (8003d88 <UART_SetConfig+0x314>)
 8003c76:	61fb      	str	r3, [r7, #28]
        break;
 8003c78:	e00d      	b.n	8003c96 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c7a:	f7fe fc69 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 8003c7e:	61f8      	str	r0, [r7, #28]
        break;
 8003c80:	e009      	b.n	8003c96 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c86:	61fb      	str	r3, [r7, #28]
        break;
 8003c88:	e005      	b.n	8003c96 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 8107 	beq.w	8003eac <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	4413      	add	r3, r2
 8003ca8:	69fa      	ldr	r2, [r7, #28]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d305      	bcc.n	8003cba <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d903      	bls.n	8003cc2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003cc0:	e0f4      	b.n	8003eac <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	461c      	mov	r4, r3
 8003cc8:	4615      	mov	r5, r2
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	022b      	lsls	r3, r5, #8
 8003cd4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003cd8:	0222      	lsls	r2, r4, #8
 8003cda:	68f9      	ldr	r1, [r7, #12]
 8003cdc:	6849      	ldr	r1, [r1, #4]
 8003cde:	0849      	lsrs	r1, r1, #1
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	4688      	mov	r8, r1
 8003ce4:	4681      	mov	r9, r0
 8003ce6:	eb12 0a08 	adds.w	sl, r2, r8
 8003cea:	eb43 0b09 	adc.w	fp, r3, r9
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	603b      	str	r3, [r7, #0]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cfc:	4650      	mov	r0, sl
 8003cfe:	4659      	mov	r1, fp
 8003d00:	f7fc fa6c 	bl	80001dc <__aeabi_uldivmod>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4613      	mov	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d12:	d308      	bcc.n	8003d26 <UART_SetConfig+0x2b2>
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d1a:	d204      	bcs.n	8003d26 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	60da      	str	r2, [r3, #12]
 8003d24:	e0c2      	b.n	8003eac <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d2c:	e0be      	b.n	8003eac <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d36:	d16a      	bne.n	8003e0e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003d38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d834      	bhi.n	8003daa <UART_SetConfig+0x336>
 8003d40:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <UART_SetConfig+0x2d4>)
 8003d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d46:	bf00      	nop
 8003d48:	08003d6d 	.word	0x08003d6d
 8003d4c:	08003d8d 	.word	0x08003d8d
 8003d50:	08003d95 	.word	0x08003d95
 8003d54:	08003dab 	.word	0x08003dab
 8003d58:	08003d9b 	.word	0x08003d9b
 8003d5c:	08003dab 	.word	0x08003dab
 8003d60:	08003dab 	.word	0x08003dab
 8003d64:	08003dab 	.word	0x08003dab
 8003d68:	08003da3 	.word	0x08003da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d6c:	f7fe fc88 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8003d70:	61f8      	str	r0, [r7, #28]
        break;
 8003d72:	e020      	b.n	8003db6 <UART_SetConfig+0x342>
 8003d74:	efff69f3 	.word	0xefff69f3
 8003d78:	40008000 	.word	0x40008000
 8003d7c:	40013800 	.word	0x40013800
 8003d80:	40021000 	.word	0x40021000
 8003d84:	40004400 	.word	0x40004400
 8003d88:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d8c:	f7fe fc8e 	bl	80026ac <HAL_RCC_GetPCLK2Freq>
 8003d90:	61f8      	str	r0, [r7, #28]
        break;
 8003d92:	e010      	b.n	8003db6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d94:	4b4c      	ldr	r3, [pc, #304]	; (8003ec8 <UART_SetConfig+0x454>)
 8003d96:	61fb      	str	r3, [r7, #28]
        break;
 8003d98:	e00d      	b.n	8003db6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9a:	f7fe fbd9 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 8003d9e:	61f8      	str	r0, [r7, #28]
        break;
 8003da0:	e009      	b.n	8003db6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da6:	61fb      	str	r3, [r7, #28]
        break;
 8003da8:	e005      	b.n	8003db6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003db4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d077      	beq.n	8003eac <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	005a      	lsls	r2, r3, #1
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	085b      	lsrs	r3, r3, #1
 8003dc6:	441a      	add	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	2b0f      	cmp	r3, #15
 8003dd6:	d916      	bls.n	8003e06 <UART_SetConfig+0x392>
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dde:	d212      	bcs.n	8003e06 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	f023 030f 	bic.w	r3, r3, #15
 8003de8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	085b      	lsrs	r3, r3, #1
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	8afb      	ldrh	r3, [r7, #22]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	8afa      	ldrh	r2, [r7, #22]
 8003e02:	60da      	str	r2, [r3, #12]
 8003e04:	e052      	b.n	8003eac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e0c:	e04e      	b.n	8003eac <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d827      	bhi.n	8003e66 <UART_SetConfig+0x3f2>
 8003e16:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <UART_SetConfig+0x3a8>)
 8003e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1c:	08003e41 	.word	0x08003e41
 8003e20:	08003e49 	.word	0x08003e49
 8003e24:	08003e51 	.word	0x08003e51
 8003e28:	08003e67 	.word	0x08003e67
 8003e2c:	08003e57 	.word	0x08003e57
 8003e30:	08003e67 	.word	0x08003e67
 8003e34:	08003e67 	.word	0x08003e67
 8003e38:	08003e67 	.word	0x08003e67
 8003e3c:	08003e5f 	.word	0x08003e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e40:	f7fe fc1e 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8003e44:	61f8      	str	r0, [r7, #28]
        break;
 8003e46:	e014      	b.n	8003e72 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e48:	f7fe fc30 	bl	80026ac <HAL_RCC_GetPCLK2Freq>
 8003e4c:	61f8      	str	r0, [r7, #28]
        break;
 8003e4e:	e010      	b.n	8003e72 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e50:	4b1d      	ldr	r3, [pc, #116]	; (8003ec8 <UART_SetConfig+0x454>)
 8003e52:	61fb      	str	r3, [r7, #28]
        break;
 8003e54:	e00d      	b.n	8003e72 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e56:	f7fe fb7b 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 8003e5a:	61f8      	str	r0, [r7, #28]
        break;
 8003e5c:	e009      	b.n	8003e72 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e62:	61fb      	str	r3, [r7, #28]
        break;
 8003e64:	e005      	b.n	8003e72 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e70:	bf00      	nop
    }

    if (pclk != 0U)
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d019      	beq.n	8003eac <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	085a      	lsrs	r2, r3, #1
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	441a      	add	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	2b0f      	cmp	r3, #15
 8003e90:	d909      	bls.n	8003ea6 <UART_SetConfig+0x432>
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e98:	d205      	bcs.n	8003ea6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60da      	str	r2, [r3, #12]
 8003ea4:	e002      	b.n	8003eac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003eb8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3728      	adds	r7, #40	; 0x28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ec6:	bf00      	nop
 8003ec8:	00f42400 	.word	0x00f42400

08003ecc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01a      	beq.n	8003fe2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fca:	d10a      	bne.n	8003fe2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	605a      	str	r2, [r3, #4]
  }
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b098      	sub	sp, #96	; 0x60
 8004014:	af02      	add	r7, sp, #8
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004020:	f7fd fa76 	bl	8001510 <HAL_GetTick>
 8004024:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b08      	cmp	r3, #8
 8004032:	d12e      	bne.n	8004092 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004034:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800403c:	2200      	movs	r2, #0
 800403e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f88c 	bl	8004160 <UART_WaitOnFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d021      	beq.n	8004092 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800405c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004062:	653b      	str	r3, [r7, #80]	; 0x50
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	461a      	mov	r2, r3
 800406a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800406c:	647b      	str	r3, [r7, #68]	; 0x44
 800406e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004070:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004072:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004074:	e841 2300 	strex	r3, r2, [r1]
 8004078:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800407a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e6      	bne.n	800404e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e062      	b.n	8004158 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b04      	cmp	r3, #4
 800409e:	d149      	bne.n	8004134 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a8:	2200      	movs	r2, #0
 80040aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f856 	bl	8004160 <UART_WaitOnFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d03c      	beq.n	8004134 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	e853 3f00 	ldrex	r3, [r3]
 80040c6:	623b      	str	r3, [r7, #32]
   return(result);
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d8:	633b      	str	r3, [r7, #48]	; 0x30
 80040da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e0:	e841 2300 	strex	r3, r2, [r1]
 80040e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1e6      	bne.n	80040ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3308      	adds	r3, #8
 80040f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0301 	bic.w	r3, r3, #1
 8004102:	64bb      	str	r3, [r7, #72]	; 0x48
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3308      	adds	r3, #8
 800410a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800410c:	61fa      	str	r2, [r7, #28]
 800410e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	69b9      	ldr	r1, [r7, #24]
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	617b      	str	r3, [r7, #20]
   return(result);
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e5      	bne.n	80040ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e011      	b.n	8004158 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3758      	adds	r7, #88	; 0x58
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004170:	e049      	b.n	8004206 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004178:	d045      	beq.n	8004206 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417a:	f7fd f9c9 	bl	8001510 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	429a      	cmp	r2, r3
 8004188:	d302      	bcc.n	8004190 <UART_WaitOnFlagUntilTimeout+0x30>
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e048      	b.n	8004226 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d031      	beq.n	8004206 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d110      	bne.n	80041d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2208      	movs	r2, #8
 80041b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f838 	bl	800422e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2208      	movs	r2, #8
 80041c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e029      	b.n	8004226 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e0:	d111      	bne.n	8004206 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f81e 	bl	800422e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e00f      	b.n	8004226 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4013      	ands	r3, r2
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	429a      	cmp	r2, r3
 8004214:	bf0c      	ite	eq
 8004216:	2301      	moveq	r3, #1
 8004218:	2300      	movne	r3, #0
 800421a:	b2db      	uxtb	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	429a      	cmp	r2, r3
 8004222:	d0a6      	beq.n	8004172 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800422e:	b480      	push	{r7}
 8004230:	b095      	sub	sp, #84	; 0x54
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800423e:	e853 3f00 	ldrex	r3, [r3]
 8004242:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800424a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004254:	643b      	str	r3, [r7, #64]	; 0x40
 8004256:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800425a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800425c:	e841 2300 	strex	r3, r2, [r1]
 8004260:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e6      	bne.n	8004236 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3308      	adds	r3, #8
 800426e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	e853 3f00 	ldrex	r3, [r3]
 8004276:	61fb      	str	r3, [r7, #28]
   return(result);
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f023 0301 	bic.w	r3, r3, #1
 800427e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3308      	adds	r3, #8
 8004286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004288:	62fa      	str	r2, [r7, #44]	; 0x2c
 800428a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800428e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004290:	e841 2300 	strex	r3, r2, [r1]
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1e5      	bne.n	8004268 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d118      	bne.n	80042d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f023 0310 	bic.w	r3, r3, #16
 80042b8:	647b      	str	r3, [r7, #68]	; 0x44
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c2:	61bb      	str	r3, [r7, #24]
 80042c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	6979      	ldr	r1, [r7, #20]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	613b      	str	r3, [r7, #16]
   return(result);
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1e6      	bne.n	80042a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042ea:	bf00      	nop
 80042ec:	3754      	adds	r7, #84	; 0x54
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
	...

080042f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80042fc:	4904      	ldr	r1, [pc, #16]	; (8004310 <MX_FATFS_Init+0x18>)
 80042fe:	4805      	ldr	r0, [pc, #20]	; (8004314 <MX_FATFS_Init+0x1c>)
 8004300:	f000 fd88 	bl	8004e14 <FATFS_LinkDriver>
 8004304:	4603      	mov	r3, r0
 8004306:	461a      	mov	r2, r3
 8004308:	4b03      	ldr	r3, [pc, #12]	; (8004318 <MX_FATFS_Init+0x20>)
 800430a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800430c:	bf00      	nop
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20001174 	.word	0x20001174
 8004314:	20000010 	.word	0x20000010
 8004318:	20001170 	.word	0x20001170

0800431c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	4618      	mov	r0, r3
 800432a:	f7fc fa89 	bl	8000840 <SD_disk_initialize>
 800432e:	4603      	mov	r3, r0
 8004330:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	4603      	mov	r3, r0
 8004342:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	4618      	mov	r0, r3
 8004348:	f7fc fb66 	bl	8000a18 <SD_disk_status>
 800434c:	4603      	mov	r3, r0
 800434e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	4603      	mov	r3, r0
 8004366:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8004368:	7bf8      	ldrb	r0, [r7, #15]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	f7fc fb68 	bl	8000a44 <SD_disk_read>
 8004374:	4603      	mov	r3, r0
 8004376:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60b9      	str	r1, [r7, #8]
 8004388:	607a      	str	r2, [r7, #4]
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	4603      	mov	r3, r0
 800438e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8004390:	7bf8      	ldrb	r0, [r7, #15]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	68b9      	ldr	r1, [r7, #8]
 8004398:	f7fc fbbe 	bl	8000b18 <SD_disk_write>
 800439c:	4603      	mov	r3, r0
 800439e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	4603      	mov	r3, r0
 80043b0:	603a      	str	r2, [r7, #0]
 80043b2:	71fb      	strb	r3, [r7, #7]
 80043b4:	460b      	mov	r3, r1
 80043b6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80043b8:	79fb      	ldrb	r3, [r7, #7]
 80043ba:	79b9      	ldrb	r1, [r7, #6]
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fc fc2e 	bl	8000c20 <SD_disk_ioctl>
 80043c4:	4603      	mov	r3, r0
 80043c6:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	4a08      	ldr	r2, [pc, #32]	; (8004400 <disk_status+0x30>)
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	79fa      	ldrb	r2, [r7, #7]
 80043e8:	4905      	ldr	r1, [pc, #20]	; (8004400 <disk_status+0x30>)
 80043ea:	440a      	add	r2, r1
 80043ec:	7a12      	ldrb	r2, [r2, #8]
 80043ee:	4610      	mov	r0, r2
 80043f0:	4798      	blx	r3
 80043f2:	4603      	mov	r3, r0
 80043f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	200013a0 	.word	0x200013a0

08004404 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004412:	79fb      	ldrb	r3, [r7, #7]
 8004414:	4a0d      	ldr	r2, [pc, #52]	; (800444c <disk_initialize+0x48>)
 8004416:	5cd3      	ldrb	r3, [r2, r3]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d111      	bne.n	8004440 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	4a0b      	ldr	r2, [pc, #44]	; (800444c <disk_initialize+0x48>)
 8004420:	2101      	movs	r1, #1
 8004422:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	4a09      	ldr	r2, [pc, #36]	; (800444c <disk_initialize+0x48>)
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	79fa      	ldrb	r2, [r7, #7]
 8004432:	4906      	ldr	r1, [pc, #24]	; (800444c <disk_initialize+0x48>)
 8004434:	440a      	add	r2, r1
 8004436:	7a12      	ldrb	r2, [r2, #8]
 8004438:	4610      	mov	r0, r2
 800443a:	4798      	blx	r3
 800443c:	4603      	mov	r3, r0
 800443e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004440:	7bfb      	ldrb	r3, [r7, #15]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	200013a0 	.word	0x200013a0

08004450 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004450:	b590      	push	{r4, r7, lr}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	607a      	str	r2, [r7, #4]
 800445a:	603b      	str	r3, [r7, #0]
 800445c:	4603      	mov	r3, r0
 800445e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004460:	7bfb      	ldrb	r3, [r7, #15]
 8004462:	4a0a      	ldr	r2, [pc, #40]	; (800448c <disk_read+0x3c>)
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	689c      	ldr	r4, [r3, #8]
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	4a07      	ldr	r2, [pc, #28]	; (800448c <disk_read+0x3c>)
 8004470:	4413      	add	r3, r2
 8004472:	7a18      	ldrb	r0, [r3, #8]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	47a0      	blx	r4
 800447c:	4603      	mov	r3, r0
 800447e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004480:	7dfb      	ldrb	r3, [r7, #23]
}
 8004482:	4618      	mov	r0, r3
 8004484:	371c      	adds	r7, #28
 8004486:	46bd      	mov	sp, r7
 8004488:	bd90      	pop	{r4, r7, pc}
 800448a:	bf00      	nop
 800448c:	200013a0 	.word	0x200013a0

08004490 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004490:	b590      	push	{r4, r7, lr}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	607a      	str	r2, [r7, #4]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	4603      	mov	r3, r0
 800449e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
 80044a2:	4a0a      	ldr	r2, [pc, #40]	; (80044cc <disk_write+0x3c>)
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	68dc      	ldr	r4, [r3, #12]
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	4a07      	ldr	r2, [pc, #28]	; (80044cc <disk_write+0x3c>)
 80044b0:	4413      	add	r3, r2
 80044b2:	7a18      	ldrb	r0, [r3, #8]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	47a0      	blx	r4
 80044bc:	4603      	mov	r3, r0
 80044be:	75fb      	strb	r3, [r7, #23]
  return res;
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	371c      	adds	r7, #28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd90      	pop	{r4, r7, pc}
 80044ca:	bf00      	nop
 80044cc:	200013a0 	.word	0x200013a0

080044d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	603a      	str	r2, [r7, #0]
 80044da:	71fb      	strb	r3, [r7, #7]
 80044dc:	460b      	mov	r3, r1
 80044de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	4a09      	ldr	r2, [pc, #36]	; (8004508 <disk_ioctl+0x38>)
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	79fa      	ldrb	r2, [r7, #7]
 80044ee:	4906      	ldr	r1, [pc, #24]	; (8004508 <disk_ioctl+0x38>)
 80044f0:	440a      	add	r2, r1
 80044f2:	7a10      	ldrb	r0, [r2, #8]
 80044f4:	79b9      	ldrb	r1, [r7, #6]
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	4798      	blx	r3
 80044fa:	4603      	mov	r3, r0
 80044fc:	73fb      	strb	r3, [r7, #15]
  return res;
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	200013a0 	.word	0x200013a0

0800450c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3301      	adds	r3, #1
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800451c:	89fb      	ldrh	r3, [r7, #14]
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	b21a      	sxth	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	b21b      	sxth	r3, r3
 8004528:	4313      	orrs	r3, r2
 800452a:	b21b      	sxth	r3, r3
 800452c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800452e:	89fb      	ldrh	r3, [r7, #14]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3303      	adds	r3, #3
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	021b      	lsls	r3, r3, #8
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	3202      	adds	r2, #2
 8004554:	7812      	ldrb	r2, [r2, #0]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	021b      	lsls	r3, r3, #8
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	3201      	adds	r2, #1
 8004562:	7812      	ldrb	r2, [r2, #0]
 8004564:	4313      	orrs	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	7812      	ldrb	r2, [r2, #0]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
	return rv;
 8004574:	68fb      	ldr	r3, [r7, #12]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
	...

08004584 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	e010      	b.n	80045b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004592:	4a0d      	ldr	r2, [pc, #52]	; (80045c8 <clear_lock+0x44>)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	4413      	add	r3, r2
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d105      	bne.n	80045ae <clear_lock+0x2a>
 80045a2:	4a09      	ldr	r2, [pc, #36]	; (80045c8 <clear_lock+0x44>)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	4413      	add	r3, r2
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3301      	adds	r3, #1
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d9eb      	bls.n	8004592 <clear_lock+0xe>
	}
}
 80045ba:	bf00      	nop
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	20001180 	.word	0x20001180

080045cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	78db      	ldrb	r3, [r3, #3]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d034      	beq.n	800464a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	7858      	ldrb	r0, [r3, #1]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80045f0:	2301      	movs	r3, #1
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	f7ff ff4c 	bl	8004490 <disk_write>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <sync_window+0x38>
			res = FR_DISK_ERR;
 80045fe:	2301      	movs	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
 8004602:	e022      	b.n	800464a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	1ad2      	subs	r2, r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	429a      	cmp	r2, r3
 8004618:	d217      	bcs.n	800464a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	789b      	ldrb	r3, [r3, #2]
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	e010      	b.n	8004644 <sync_window+0x78>
					wsect += fs->fsize;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4413      	add	r3, r2
 800462a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	7858      	ldrb	r0, [r3, #1]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004636:	2301      	movs	r3, #1
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	f7ff ff29 	bl	8004490 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	3b01      	subs	r3, #1
 8004642:	613b      	str	r3, [r7, #16]
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d8eb      	bhi.n	8004622 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800464a:	7bfb      	ldrb	r3, [r7, #15]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d01b      	beq.n	80046a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff ffad 	bl	80045cc <sync_window>
 8004672:	4603      	mov	r3, r0
 8004674:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d113      	bne.n	80046a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	7858      	ldrb	r0, [r3, #1]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004686:	2301      	movs	r3, #1
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	f7ff fee1 	bl	8004450 <disk_read>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d004      	beq.n	800469e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004698:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800469a:	2301      	movs	r3, #1
 800469c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b087      	sub	sp, #28
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80046b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046ba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d031      	beq.n	8004728 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	e002      	b.n	80046d2 <get_ldnumber+0x24>
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	3301      	adds	r3, #1
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b1f      	cmp	r3, #31
 80046d8:	d903      	bls.n	80046e2 <get_ldnumber+0x34>
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b3a      	cmp	r3, #58	; 0x3a
 80046e0:	d1f4      	bne.n	80046cc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b3a      	cmp	r3, #58	; 0x3a
 80046e8:	d11c      	bne.n	8004724 <get_ldnumber+0x76>
			tp = *path;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	60fa      	str	r2, [r7, #12]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	3b30      	subs	r3, #48	; 0x30
 80046fa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b09      	cmp	r3, #9
 8004700:	d80e      	bhi.n	8004720 <get_ldnumber+0x72>
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	429a      	cmp	r2, r3
 8004708:	d10a      	bne.n	8004720 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d107      	bne.n	8004720 <get_ldnumber+0x72>
					vol = (int)i;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	3301      	adds	r3, #1
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	e002      	b.n	800472a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004724:	2300      	movs	r3, #0
 8004726:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004728:	693b      	ldr	r3, [r7, #16]
}
 800472a:	4618      	mov	r0, r3
 800472c:	371c      	adds	r7, #28
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
	...

08004738 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	70da      	strb	r2, [r3, #3]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800474e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004750:	6839      	ldr	r1, [r7, #0]
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff ff7e 	bl	8004654 <move_window>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <check_fs+0x2a>
 800475e:	2304      	movs	r3, #4
 8004760:	e038      	b.n	80047d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3338      	adds	r3, #56	; 0x38
 8004766:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff fece 	bl	800450c <ld_word>
 8004770:	4603      	mov	r3, r0
 8004772:	461a      	mov	r2, r3
 8004774:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004778:	429a      	cmp	r2, r3
 800477a:	d001      	beq.n	8004780 <check_fs+0x48>
 800477c:	2303      	movs	r3, #3
 800477e:	e029      	b.n	80047d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004786:	2be9      	cmp	r3, #233	; 0xe9
 8004788:	d009      	beq.n	800479e <check_fs+0x66>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004790:	2beb      	cmp	r3, #235	; 0xeb
 8004792:	d11e      	bne.n	80047d2 <check_fs+0x9a>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800479a:	2b90      	cmp	r3, #144	; 0x90
 800479c:	d119      	bne.n	80047d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3338      	adds	r3, #56	; 0x38
 80047a2:	3336      	adds	r3, #54	; 0x36
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff fec9 	bl	800453c <ld_dword>
 80047aa:	4603      	mov	r3, r0
 80047ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80047b0:	4a0a      	ldr	r2, [pc, #40]	; (80047dc <check_fs+0xa4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d101      	bne.n	80047ba <check_fs+0x82>
 80047b6:	2300      	movs	r3, #0
 80047b8:	e00c      	b.n	80047d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	3338      	adds	r3, #56	; 0x38
 80047be:	3352      	adds	r3, #82	; 0x52
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff febb 	bl	800453c <ld_dword>
 80047c6:	4603      	mov	r3, r0
 80047c8:	4a05      	ldr	r2, [pc, #20]	; (80047e0 <check_fs+0xa8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d101      	bne.n	80047d2 <check_fs+0x9a>
 80047ce:	2300      	movs	r3, #0
 80047d0:	e000      	b.n	80047d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80047d2:	2302      	movs	r3, #2
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	00544146 	.word	0x00544146
 80047e0:	33544146 	.word	0x33544146

080047e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b096      	sub	sp, #88	; 0x58
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	4613      	mov	r3, r2
 80047f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f7ff ff58 	bl	80046ae <get_ldnumber>
 80047fe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004802:	2b00      	cmp	r3, #0
 8004804:	da01      	bge.n	800480a <find_volume+0x26>
 8004806:	230b      	movs	r3, #11
 8004808:	e265      	b.n	8004cd6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800480a:	4a9f      	ldr	r2, [pc, #636]	; (8004a88 <find_volume+0x2a4>)
 800480c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800480e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004812:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <find_volume+0x3a>
 800481a:	230c      	movs	r3, #12
 800481c:	e25b      	b.n	8004cd6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004822:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800482c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01a      	beq.n	800486a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004836:	785b      	ldrb	r3, [r3, #1]
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff fdc9 	bl	80043d0 <disk_status>
 800483e:	4603      	mov	r3, r0
 8004840:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004844:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10c      	bne.n	800486a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <find_volume+0x82>
 8004856:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004862:	230a      	movs	r3, #10
 8004864:	e237      	b.n	8004cd6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8004866:	2300      	movs	r3, #0
 8004868:	e235      	b.n	8004cd6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800486a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486c:	2200      	movs	r2, #0
 800486e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004872:	b2da      	uxtb	r2, r3
 8004874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004876:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487a:	785b      	ldrb	r3, [r3, #1]
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff fdc1 	bl	8004404 <disk_initialize>
 8004882:	4603      	mov	r3, r0
 8004884:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004888:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004894:	2303      	movs	r3, #3
 8004896:	e21e      	b.n	8004cd6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004898:	79fb      	ldrb	r3, [r7, #7]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <find_volume+0xca>
 800489e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80048aa:	230a      	movs	r3, #10
 80048ac:	e213      	b.n	8004cd6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	7858      	ldrb	r0, [r3, #1]
 80048b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b4:	330c      	adds	r3, #12
 80048b6:	461a      	mov	r2, r3
 80048b8:	2102      	movs	r1, #2
 80048ba:	f7ff fe09 	bl	80044d0 <disk_ioctl>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <find_volume+0xe4>
 80048c4:	2301      	movs	r3, #1
 80048c6:	e206      	b.n	8004cd6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80048c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ca:	899b      	ldrh	r3, [r3, #12]
 80048cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d0:	d80d      	bhi.n	80048ee <find_volume+0x10a>
 80048d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d4:	899b      	ldrh	r3, [r3, #12]
 80048d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048da:	d308      	bcc.n	80048ee <find_volume+0x10a>
 80048dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048de:	899b      	ldrh	r3, [r3, #12]
 80048e0:	461a      	mov	r2, r3
 80048e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e4:	899b      	ldrh	r3, [r3, #12]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	4013      	ands	r3, r2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <find_volume+0x10e>
 80048ee:	2301      	movs	r3, #1
 80048f0:	e1f1      	b.n	8004cd6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80048f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80048f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80048fa:	f7ff ff1d 	bl	8004738 <check_fs>
 80048fe:	4603      	mov	r3, r0
 8004900:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004904:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004908:	2b02      	cmp	r3, #2
 800490a:	d149      	bne.n	80049a0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800490c:	2300      	movs	r3, #0
 800490e:	643b      	str	r3, [r7, #64]	; 0x40
 8004910:	e01e      	b.n	8004950 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004914:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004920:	4413      	add	r3, r2
 8004922:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	3304      	adds	r3, #4
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d006      	beq.n	800493c <find_volume+0x158>
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	3308      	adds	r3, #8
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff fe02 	bl	800453c <ld_dword>
 8004938:	4602      	mov	r2, r0
 800493a:	e000      	b.n	800493e <find_volume+0x15a>
 800493c:	2200      	movs	r2, #0
 800493e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	3358      	adds	r3, #88	; 0x58
 8004944:	443b      	add	r3, r7
 8004946:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800494a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800494c:	3301      	adds	r3, #1
 800494e:	643b      	str	r3, [r7, #64]	; 0x40
 8004950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004952:	2b03      	cmp	r3, #3
 8004954:	d9dd      	bls.n	8004912 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004956:	2300      	movs	r3, #0
 8004958:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800495a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <find_volume+0x182>
 8004960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004962:	3b01      	subs	r3, #1
 8004964:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	3358      	adds	r3, #88	; 0x58
 800496c:	443b      	add	r3, r7
 800496e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004972:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004976:	2b00      	cmp	r3, #0
 8004978:	d005      	beq.n	8004986 <find_volume+0x1a2>
 800497a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800497c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800497e:	f7ff fedb 	bl	8004738 <check_fs>
 8004982:	4603      	mov	r3, r0
 8004984:	e000      	b.n	8004988 <find_volume+0x1a4>
 8004986:	2303      	movs	r3, #3
 8004988:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800498c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004990:	2b01      	cmp	r3, #1
 8004992:	d905      	bls.n	80049a0 <find_volume+0x1bc>
 8004994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004996:	3301      	adds	r3, #1
 8004998:	643b      	str	r3, [r7, #64]	; 0x40
 800499a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800499c:	2b03      	cmp	r3, #3
 800499e:	d9e2      	bls.n	8004966 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80049a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d101      	bne.n	80049ac <find_volume+0x1c8>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e194      	b.n	8004cd6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80049ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d901      	bls.n	80049b8 <find_volume+0x1d4>
 80049b4:	230d      	movs	r3, #13
 80049b6:	e18e      	b.n	8004cd6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80049b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ba:	3338      	adds	r3, #56	; 0x38
 80049bc:	330b      	adds	r3, #11
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fda4 	bl	800450c <ld_word>
 80049c4:	4603      	mov	r3, r0
 80049c6:	461a      	mov	r2, r3
 80049c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ca:	899b      	ldrh	r3, [r3, #12]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d001      	beq.n	80049d4 <find_volume+0x1f0>
 80049d0:	230d      	movs	r3, #13
 80049d2:	e180      	b.n	8004cd6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80049d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d6:	3338      	adds	r3, #56	; 0x38
 80049d8:	3316      	adds	r3, #22
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fd96 	bl	800450c <ld_word>
 80049e0:	4603      	mov	r3, r0
 80049e2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80049e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d106      	bne.n	80049f8 <find_volume+0x214>
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ec:	3338      	adds	r3, #56	; 0x38
 80049ee:	3324      	adds	r3, #36	; 0x24
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff fda3 	bl	800453c <ld_dword>
 80049f6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80049f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049fc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80049fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a00:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8004a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a06:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0a:	789b      	ldrb	r3, [r3, #2]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d005      	beq.n	8004a1c <find_volume+0x238>
 8004a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a12:	789b      	ldrb	r3, [r3, #2]
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d001      	beq.n	8004a1c <find_volume+0x238>
 8004a18:	230d      	movs	r3, #13
 8004a1a:	e15c      	b.n	8004cd6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1e:	789b      	ldrb	r3, [r3, #2]
 8004a20:	461a      	mov	r2, r3
 8004a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a24:	fb02 f303 	mul.w	r3, r2, r3
 8004a28:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a34:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a38:	895b      	ldrh	r3, [r3, #10]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d008      	beq.n	8004a50 <find_volume+0x26c>
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a40:	895b      	ldrh	r3, [r3, #10]
 8004a42:	461a      	mov	r2, r3
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	895b      	ldrh	r3, [r3, #10]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <find_volume+0x270>
 8004a50:	230d      	movs	r3, #13
 8004a52:	e140      	b.n	8004cd6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a56:	3338      	adds	r3, #56	; 0x38
 8004a58:	3311      	adds	r3, #17
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff fd56 	bl	800450c <ld_word>
 8004a60:	4603      	mov	r3, r0
 8004a62:	461a      	mov	r2, r3
 8004a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a66:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	891b      	ldrh	r3, [r3, #8]
 8004a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a6e:	8992      	ldrh	r2, [r2, #12]
 8004a70:	0952      	lsrs	r2, r2, #5
 8004a72:	b292      	uxth	r2, r2
 8004a74:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a78:	fb01 f202 	mul.w	r2, r1, r2
 8004a7c:	1a9b      	subs	r3, r3, r2
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <find_volume+0x2a8>
 8004a84:	230d      	movs	r3, #13
 8004a86:	e126      	b.n	8004cd6 <find_volume+0x4f2>
 8004a88:	20001178 	.word	0x20001178

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8e:	3338      	adds	r3, #56	; 0x38
 8004a90:	3313      	adds	r3, #19
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fd3a 	bl	800450c <ld_word>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <find_volume+0x2cc>
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa4:	3338      	adds	r3, #56	; 0x38
 8004aa6:	3320      	adds	r3, #32
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff fd47 	bl	800453c <ld_dword>
 8004aae:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab2:	3338      	adds	r3, #56	; 0x38
 8004ab4:	330e      	adds	r3, #14
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff fd28 	bl	800450c <ld_word>
 8004abc:	4603      	mov	r3, r0
 8004abe:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004ac0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <find_volume+0x2e6>
 8004ac6:	230d      	movs	r3, #13
 8004ac8:	e105      	b.n	8004cd6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004aca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ace:	4413      	add	r3, r2
 8004ad0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ad2:	8911      	ldrh	r1, [r2, #8]
 8004ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ad6:	8992      	ldrh	r2, [r2, #12]
 8004ad8:	0952      	lsrs	r2, r2, #5
 8004ada:	b292      	uxth	r2, r2
 8004adc:	fbb1 f2f2 	udiv	r2, r1, r2
 8004ae0:	b292      	uxth	r2, r2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004ae6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d201      	bcs.n	8004af2 <find_volume+0x30e>
 8004aee:	230d      	movs	r3, #13
 8004af0:	e0f1      	b.n	8004cd6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004afa:	8952      	ldrh	r2, [r2, #10]
 8004afc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <find_volume+0x328>
 8004b08:	230d      	movs	r3, #13
 8004b0a:	e0e4      	b.n	8004cd6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d802      	bhi.n	8004b22 <find_volume+0x33e>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d802      	bhi.n	8004b32 <find_volume+0x34e>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	1c9a      	adds	r2, r3, #2
 8004b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b38:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b3e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004b40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b44:	441a      	add	r2, r3
 8004b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b48:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8004b4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	441a      	add	r2, r3
 8004b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8004b54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d11e      	bne.n	8004b9a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5e:	3338      	adds	r3, #56	; 0x38
 8004b60:	332a      	adds	r3, #42	; 0x2a
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff fcd2 	bl	800450c <ld_word>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <find_volume+0x38e>
 8004b6e:	230d      	movs	r3, #13
 8004b70:	e0b1      	b.n	8004cd6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b74:	891b      	ldrh	r3, [r3, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <find_volume+0x39a>
 8004b7a:	230d      	movs	r3, #13
 8004b7c:	e0ab      	b.n	8004cd6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b80:	3338      	adds	r3, #56	; 0x38
 8004b82:	332c      	adds	r3, #44	; 0x2c
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff fcd9 	bl	800453c <ld_dword>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	647b      	str	r3, [r7, #68]	; 0x44
 8004b98:	e01f      	b.n	8004bda <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9c:	891b      	ldrh	r3, [r3, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <find_volume+0x3c2>
 8004ba2:	230d      	movs	r3, #13
 8004ba4:	e097      	b.n	8004cd6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bac:	441a      	add	r2, r3
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004bb2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d103      	bne.n	8004bc2 <find_volume+0x3de>
 8004bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	e00a      	b.n	8004bd8 <find_volume+0x3f4>
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc4:	69da      	ldr	r2, [r3, #28]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	4413      	add	r3, r2
 8004bcc:	085a      	lsrs	r2, r3, #1
 8004bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004bd8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bdc:	6a1a      	ldr	r2, [r3, #32]
 8004bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be0:	899b      	ldrh	r3, [r3, #12]
 8004be2:	4619      	mov	r1, r3
 8004be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be6:	440b      	add	r3, r1
 8004be8:	3b01      	subs	r3, #1
 8004bea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bec:	8989      	ldrh	r1, [r1, #12]
 8004bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d201      	bcs.n	8004bfa <find_volume+0x416>
 8004bf6:	230d      	movs	r3, #13
 8004bf8:	e06d      	b.n	8004cd6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c00:	619a      	str	r2, [r3, #24]
 8004c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c04:	699a      	ldr	r2, [r3, #24]
 8004c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c08:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0c:	2280      	movs	r2, #128	; 0x80
 8004c0e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004c10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c14:	2b03      	cmp	r3, #3
 8004c16:	d149      	bne.n	8004cac <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1a:	3338      	adds	r3, #56	; 0x38
 8004c1c:	3330      	adds	r3, #48	; 0x30
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff fc74 	bl	800450c <ld_word>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d140      	bne.n	8004cac <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c32:	f7ff fd0f 	bl	8004654 <move_window>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d137      	bne.n	8004cac <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3e:	2200      	movs	r2, #0
 8004c40:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c44:	3338      	adds	r3, #56	; 0x38
 8004c46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff fc5e 	bl	800450c <ld_word>
 8004c50:	4603      	mov	r3, r0
 8004c52:	461a      	mov	r2, r3
 8004c54:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d127      	bne.n	8004cac <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5e:	3338      	adds	r3, #56	; 0x38
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff fc6b 	bl	800453c <ld_dword>
 8004c66:	4603      	mov	r3, r0
 8004c68:	4a1d      	ldr	r2, [pc, #116]	; (8004ce0 <find_volume+0x4fc>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d11e      	bne.n	8004cac <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	3338      	adds	r3, #56	; 0x38
 8004c72:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff fc60 	bl	800453c <ld_dword>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4a19      	ldr	r2, [pc, #100]	; (8004ce4 <find_volume+0x500>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d113      	bne.n	8004cac <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c86:	3338      	adds	r3, #56	; 0x38
 8004c88:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff fc55 	bl	800453c <ld_dword>
 8004c92:	4602      	mov	r2, r0
 8004c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c96:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9a:	3338      	adds	r3, #56	; 0x38
 8004c9c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff fc4b 	bl	800453c <ld_dword>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004caa:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cae:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004cb2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004cb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <find_volume+0x504>)
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <find_volume+0x504>)
 8004cbe:	801a      	strh	r2, [r3, #0]
 8004cc0:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <find_volume+0x504>)
 8004cc2:	881a      	ldrh	r2, [r3, #0]
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cca:	4a08      	ldr	r2, [pc, #32]	; (8004cec <find_volume+0x508>)
 8004ccc:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004cce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004cd0:	f7ff fc58 	bl	8004584 <clear_lock>
#endif
	return FR_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3758      	adds	r7, #88	; 0x58
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	41615252 	.word	0x41615252
 8004ce4:	61417272 	.word	0x61417272
 8004ce8:	2000117c 	.word	0x2000117c
 8004cec:	200011a0 	.word	0x200011a0

08004cf0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004d02:	f107 0310 	add.w	r3, r7, #16
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff fcd1 	bl	80046ae <get_ldnumber>
 8004d0c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	da01      	bge.n	8004d18 <f_mount+0x28>
 8004d14:	230b      	movs	r3, #11
 8004d16:	e02b      	b.n	8004d70 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004d18:	4a17      	ldr	r2, [pc, #92]	; (8004d78 <f_mount+0x88>)
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d20:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004d28:	69b8      	ldr	r0, [r7, #24]
 8004d2a:	f7ff fc2b 	bl	8004584 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	490d      	ldr	r1, [pc, #52]	; (8004d78 <f_mount+0x88>)
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <f_mount+0x66>
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d001      	beq.n	8004d5a <f_mount+0x6a>
 8004d56:	2300      	movs	r3, #0
 8004d58:	e00a      	b.n	8004d70 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004d5a:	f107 010c 	add.w	r1, r7, #12
 8004d5e:	f107 0308 	add.w	r3, r7, #8
 8004d62:	2200      	movs	r2, #0
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff fd3d 	bl	80047e4 <find_volume>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20001178 	.word	0x20001178

08004d7c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	4613      	mov	r3, r2
 8004d88:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004d92:	4b1f      	ldr	r3, [pc, #124]	; (8004e10 <FATFS_LinkDriverEx+0x94>)
 8004d94:	7a5b      	ldrb	r3, [r3, #9]
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d131      	bne.n	8004e00 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004d9c:	4b1c      	ldr	r3, [pc, #112]	; (8004e10 <FATFS_LinkDriverEx+0x94>)
 8004d9e:	7a5b      	ldrb	r3, [r3, #9]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	461a      	mov	r2, r3
 8004da4:	4b1a      	ldr	r3, [pc, #104]	; (8004e10 <FATFS_LinkDriverEx+0x94>)
 8004da6:	2100      	movs	r1, #0
 8004da8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004daa:	4b19      	ldr	r3, [pc, #100]	; (8004e10 <FATFS_LinkDriverEx+0x94>)
 8004dac:	7a5b      	ldrb	r3, [r3, #9]
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	4a17      	ldr	r2, [pc, #92]	; (8004e10 <FATFS_LinkDriverEx+0x94>)
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004dba:	4b15      	ldr	r3, [pc, #84]	; (8004e10 <FATFS_LinkDriverEx+0x94>)
 8004dbc:	7a5b      	ldrb	r3, [r3, #9]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4b13      	ldr	r3, [pc, #76]	; (8004e10 <FATFS_LinkDriverEx+0x94>)
 8004dc4:	4413      	add	r3, r2
 8004dc6:	79fa      	ldrb	r2, [r7, #7]
 8004dc8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004dca:	4b11      	ldr	r3, [pc, #68]	; (8004e10 <FATFS_LinkDriverEx+0x94>)
 8004dcc:	7a5b      	ldrb	r3, [r3, #9]
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	b2d1      	uxtb	r1, r2
 8004dd4:	4a0e      	ldr	r2, [pc, #56]	; (8004e10 <FATFS_LinkDriverEx+0x94>)
 8004dd6:	7251      	strb	r1, [r2, #9]
 8004dd8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004dda:	7dbb      	ldrb	r3, [r7, #22]
 8004ddc:	3330      	adds	r3, #48	; 0x30
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	3301      	adds	r3, #1
 8004de8:	223a      	movs	r2, #58	; 0x3a
 8004dea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	3302      	adds	r3, #2
 8004df0:	222f      	movs	r2, #47	; 0x2f
 8004df2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	3303      	adds	r3, #3
 8004df8:	2200      	movs	r2, #0
 8004dfa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	371c      	adds	r7, #28
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	200013a0 	.word	0x200013a0

08004e14 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004e1e:	2200      	movs	r2, #0
 8004e20:	6839      	ldr	r1, [r7, #0]
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7ff ffaa 	bl	8004d7c <FATFS_LinkDriverEx>
 8004e28:	4603      	mov	r3, r0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <memset>:
 8004e32:	4402      	add	r2, r0
 8004e34:	4603      	mov	r3, r0
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d100      	bne.n	8004e3c <memset+0xa>
 8004e3a:	4770      	bx	lr
 8004e3c:	f803 1b01 	strb.w	r1, [r3], #1
 8004e40:	e7f9      	b.n	8004e36 <memset+0x4>
	...

08004e44 <__libc_init_array>:
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	4d0d      	ldr	r5, [pc, #52]	; (8004e7c <__libc_init_array+0x38>)
 8004e48:	4c0d      	ldr	r4, [pc, #52]	; (8004e80 <__libc_init_array+0x3c>)
 8004e4a:	1b64      	subs	r4, r4, r5
 8004e4c:	10a4      	asrs	r4, r4, #2
 8004e4e:	2600      	movs	r6, #0
 8004e50:	42a6      	cmp	r6, r4
 8004e52:	d109      	bne.n	8004e68 <__libc_init_array+0x24>
 8004e54:	4d0b      	ldr	r5, [pc, #44]	; (8004e84 <__libc_init_array+0x40>)
 8004e56:	4c0c      	ldr	r4, [pc, #48]	; (8004e88 <__libc_init_array+0x44>)
 8004e58:	f000 f818 	bl	8004e8c <_init>
 8004e5c:	1b64      	subs	r4, r4, r5
 8004e5e:	10a4      	asrs	r4, r4, #2
 8004e60:	2600      	movs	r6, #0
 8004e62:	42a6      	cmp	r6, r4
 8004e64:	d105      	bne.n	8004e72 <__libc_init_array+0x2e>
 8004e66:	bd70      	pop	{r4, r5, r6, pc}
 8004e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6c:	4798      	blx	r3
 8004e6e:	3601      	adds	r6, #1
 8004e70:	e7ee      	b.n	8004e50 <__libc_init_array+0xc>
 8004e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e76:	4798      	blx	r3
 8004e78:	3601      	adds	r6, #1
 8004e7a:	e7f2      	b.n	8004e62 <__libc_init_array+0x1e>
 8004e7c:	08004fac 	.word	0x08004fac
 8004e80:	08004fac 	.word	0x08004fac
 8004e84:	08004fac 	.word	0x08004fac
 8004e88:	08004fb0 	.word	0x08004fb0

08004e8c <_init>:
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8e:	bf00      	nop
 8004e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e92:	bc08      	pop	{r3}
 8004e94:	469e      	mov	lr, r3
 8004e96:	4770      	bx	lr

08004e98 <_fini>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	bf00      	nop
 8004e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9e:	bc08      	pop	{r3}
 8004ea0:	469e      	mov	lr, r3
 8004ea2:	4770      	bx	lr
